/**
 * @fileoverview added by tsickle
 * Generated from: lib/pdf-notification-service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject, ReplaySubject } from 'rxjs';
import * as i0 from "@angular/core";
var PDFNotificationService = /** @class */ (function () {
    function PDFNotificationService() {
        var _this = this;
        // this event is fired when the pdf.js library has been loaded and objects like PDFApplication are available
        this.onPDFJSInit = new Subject();
        this.pdfjsVersion = new ReplaySubject(1);
        if (typeof window !== 'undefined') {
            if (((/** @type {?} */ (window))).pdfjsLib && ((/** @type {?} */ (window))).pdfjsLib.version) {
                this.pdfjsVersion.next(((/** @type {?} */ (window))).pdfjsLib.version);
            }
            else {
                this.onPDFJSInit.subscribe((/**
                 * @return {?}
                 */
                function () {
                    _this.pdfjsVersion.next(((/** @type {?} */ (window))).pdfjsLib.version);
                }));
            }
        }
    }
    PDFNotificationService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    /** @nocollapse */
    PDFNotificationService.ctorParameters = function () { return []; };
    /** @nocollapse */ PDFNotificationService.ngInjectableDef = i0.defineInjectable({ factory: function PDFNotificationService_Factory() { return new PDFNotificationService(); }, token: PDFNotificationService, providedIn: "root" });
    return PDFNotificationService;
}());
export { PDFNotificationService };
if (false) {
    /** @type {?} */
    PDFNotificationService.prototype.onPDFJSInit;
    /** @type {?} */
    PDFNotificationService.prototype.pdfjsVersion;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGRmLW5vdGlmaWNhdGlvbi1zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWV4dGVuZGVkLXBkZi12aWV3ZXIvIiwic291cmNlcyI6WyJsaWIvcGRmLW5vdGlmaWNhdGlvbi1zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7QUFFOUM7SUFTRTtRQUFBLGlCQVVDOztRQWRNLGdCQUFXLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztRQUVsQyxpQkFBWSxHQUFHLElBQUksYUFBYSxDQUFTLENBQUMsQ0FBQyxDQUFDO1FBR2pELElBQUksT0FBTyxNQUFNLEtBQUssV0FBVyxFQUFFO1lBQ2pDLElBQUksQ0FBQyxtQkFBQSxNQUFNLEVBQU8sQ0FBQyxDQUFDLFFBQVEsSUFBSSxDQUFDLG1CQUFBLE1BQU0sRUFBTyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRTtnQkFDaEUsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxtQkFBQSxNQUFNLEVBQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUMxRDtpQkFBTTtnQkFDTCxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVM7OztnQkFBQztvQkFDekIsS0FBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxtQkFBQSxNQUFNLEVBQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDM0QsQ0FBQyxFQUFDLENBQUM7YUFDSjtTQUNGO0lBQ0gsQ0FBQzs7Z0JBbkJGLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7O2lDQUxEO0NBdUJDLEFBcEJELElBb0JDO1NBakJZLHNCQUFzQjs7O0lBRWpDLDZDQUF5Qzs7SUFFekMsOENBQW1EIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCwgUmVwbGF5U3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgUERGTm90aWZpY2F0aW9uU2VydmljZSB7XG4gIC8vIHRoaXMgZXZlbnQgaXMgZmlyZWQgd2hlbiB0aGUgcGRmLmpzIGxpYnJhcnkgaGFzIGJlZW4gbG9hZGVkIGFuZCBvYmplY3RzIGxpa2UgUERGQXBwbGljYXRpb24gYXJlIGF2YWlsYWJsZVxuICBwdWJsaWMgb25QREZKU0luaXQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gIHB1YmxpYyBwZGZqc1ZlcnNpb24gPSBuZXcgUmVwbGF5U3ViamVjdDxzdHJpbmc+KDEpO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKCh3aW5kb3cgYXMgYW55KS5wZGZqc0xpYiAmJiAod2luZG93IGFzIGFueSkucGRmanNMaWIudmVyc2lvbikge1xuICAgICAgICB0aGlzLnBkZmpzVmVyc2lvbi5uZXh0KCh3aW5kb3cgYXMgYW55KS5wZGZqc0xpYi52ZXJzaW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMub25QREZKU0luaXQuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICB0aGlzLnBkZmpzVmVyc2lvbi5uZXh0KCh3aW5kb3cgYXMgYW55KS5wZGZqc0xpYi52ZXJzaW9uKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXX0=