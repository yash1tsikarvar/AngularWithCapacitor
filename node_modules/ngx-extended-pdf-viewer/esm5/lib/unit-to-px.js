/**
 * @fileoverview added by tsickle
 * Generated from: lib/unit-to-px.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var UnitToPx = /** @class */ (function () {
    function UnitToPx() {
    }
    /**
     * @private
     * @return {?}
     */
    UnitToPx.initElements = /**
     * @private
     * @return {?}
     */
    function () {
        // this.con = document.createElement('div');
        this.con.style.position = 'absolute';
        this.con.style.width = '0';
        this.con.style.height = '0';
        this.con.style.visibility = 'hidden';
        this.con.style.overflow = 'hidden';
        // this.el = document.createElement('div');
        this.con.appendChild(this.el);
    };
    /**
     * @private
     * @param {?} unit
     * @return {?}
     */
    UnitToPx.pxPerUnit = /**
     * @private
     * @param {?} unit
     * @return {?}
     */
    function (unit) {
        if (!this.pxPerUnitCache[unit]) {
            if (!this.con) {
                this.initElements();
            }
            this.el.style.width = this.sample + unit;
            document.body.appendChild(this.con);
            /** @type {?} */
            var dimension = this.el.getBoundingClientRect();
            (/** @type {?} */ (this.con.parentNode)).removeChild(this.con);
            this.pxPerUnitCache[unit] = dimension.width / this.sample;
        }
        return this.pxPerUnitCache[unit];
    };
    /**
     * @param {?} length
     * @return {?}
     */
    UnitToPx.toPx = /**
     * @param {?} length
     * @return {?}
     */
    function (length) {
        /** @type {?} */
        var unitRe = /^\s*([+-]?[\d\.]*)\s*(.*)\s*$/i;
        /** @type {?} */
        var match = unitRe.exec(length);
        if (match != null && match.length > 2) {
            /** @type {?} */
            var bare = match[1] === '';
            /** @type {?} */
            var val = bare ? 1 : Number(match[1]);
            /** @type {?} */
            var unit = match[2];
            /** @type {?} */
            var valid = !isNaN(val) && unit;
            if (valid) {
                return unit == 'px' ? val : this.pxPerUnit(unit) * val;
            }
        }
        throw new TypeError('Error parsing length');
    };
    // cache this.con, el for reused
    UnitToPx.con = document.createElement('div');
    UnitToPx.el = document.createElement('div');
    // high sample will more accurate?
    UnitToPx.sample = 100;
    UnitToPx.pxPerUnitCache = {};
    return UnitToPx;
}());
export { UnitToPx };
if (false) {
    /**
     * @type {?}
     * @private
     */
    UnitToPx.con;
    /**
     * @type {?}
     * @private
     */
    UnitToPx.el;
    /**
     * @type {?}
     * @private
     */
    UnitToPx.sample;
    /**
     * @type {?}
     * @private
     */
    UnitToPx.pxPerUnitCache;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pdC10by1weC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1leHRlbmRlZC1wZGYtdmlld2VyLyIsInNvdXJjZXMiOlsibGliL3VuaXQtdG8tcHgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtJQUFBO0lBbURBLENBQUM7Ozs7O0lBekNnQixxQkFBWTs7OztJQUEzQjtRQUNFLDRDQUE0QztRQUM1QyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDO1FBQ3JDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUM7UUFDM0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQztRQUM1QixJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsUUFBUSxDQUFDO1FBQ3JDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFFbkMsMkNBQTJDO1FBRTNDLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNoQyxDQUFDOzs7Ozs7SUFFYyxrQkFBUzs7Ozs7SUFBeEIsVUFBeUIsSUFBWTtRQUNuQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUM5QixJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtnQkFDYixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7YUFDckI7WUFDRCxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7WUFDekMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDOztnQkFDaEMsU0FBUyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMscUJBQXFCLEVBQUU7WUFDL0MsbUJBQUEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzNDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEdBQUcsU0FBUyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1NBQzNEO1FBQ0QsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ25DLENBQUM7Ozs7O0lBRWEsYUFBSTs7OztJQUFsQixVQUFtQixNQUFNOztZQUNuQixNQUFNLEdBQUcsZ0NBQWdDOztZQUN6QyxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDL0IsSUFBSSxLQUFLLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFOztnQkFDL0IsSUFBSSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFOztnQkFDdEIsR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDOztnQkFDakMsSUFBSSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7O2dCQUNmLEtBQUssR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJO1lBQ2pDLElBQUksS0FBSyxFQUFFO2dCQUNULE9BQU8sSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQzthQUN4RDtTQUNGO1FBQ0QsTUFBTSxJQUFJLFNBQVMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0lBQzlDLENBQUM7O0lBaERjLFlBQUcsR0FBbUIsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNwRCxXQUFFLEdBQW1CLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7O0lBRzFDLGVBQU0sR0FBRyxHQUFHLENBQUM7SUFFdEIsdUJBQWMsR0FBOEIsRUFBRSxDQUFDO0lBMkNoRSxlQUFDO0NBQUEsQUFuREQsSUFtREM7U0FuRFksUUFBUTs7Ozs7O0lBRW5CLGFBQW1FOzs7OztJQUNuRSxZQUFrRTs7Ozs7SUFHbEUsZ0JBQXFDOzs7OztJQUVyQyx3QkFBOEQiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgVW5pdFRvUHgge1xuICAvLyBjYWNoZSB0aGlzLmNvbiwgZWwgZm9yIHJldXNlZFxuICBwcml2YXRlIHN0YXRpYyBjb246IEhUTUxEaXZFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHByaXZhdGUgc3RhdGljIGVsOiBIVE1MRGl2RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gIC8vIGhpZ2ggc2FtcGxlIHdpbGwgbW9yZSBhY2N1cmF0ZT9cbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgc2FtcGxlID0gMTAwO1xuXG4gIHByaXZhdGUgc3RhdGljIHB4UGVyVW5pdENhY2hlOiB7IFtrZXk6IHN0cmluZ106IG51bWJlciB9ID0ge307XG5cbiAgcHJpdmF0ZSBzdGF0aWMgaW5pdEVsZW1lbnRzKCkge1xuICAgIC8vIHRoaXMuY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdGhpcy5jb24uc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgIHRoaXMuY29uLnN0eWxlLndpZHRoID0gJzAnO1xuICAgIHRoaXMuY29uLnN0eWxlLmhlaWdodCA9ICcwJztcbiAgICB0aGlzLmNvbi5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XG4gICAgdGhpcy5jb24uc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcblxuICAgIC8vIHRoaXMuZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgIHRoaXMuY29uLmFwcGVuZENoaWxkKHRoaXMuZWwpO1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgcHhQZXJVbml0KHVuaXQ6IHN0cmluZyk6IG51bWJlciB7XG4gICAgaWYgKCF0aGlzLnB4UGVyVW5pdENhY2hlW3VuaXRdKSB7XG4gICAgICBpZiAoIXRoaXMuY29uKSB7XG4gICAgICAgIHRoaXMuaW5pdEVsZW1lbnRzKCk7XG4gICAgICB9XG4gICAgICB0aGlzLmVsLnN0eWxlLndpZHRoID0gdGhpcy5zYW1wbGUgKyB1bml0O1xuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLmNvbik7XG4gICAgICB2YXIgZGltZW5zaW9uID0gdGhpcy5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIHRoaXMuY29uLnBhcmVudE5vZGUhLnJlbW92ZUNoaWxkKHRoaXMuY29uKTtcbiAgICAgIHRoaXMucHhQZXJVbml0Q2FjaGVbdW5pdF0gPSBkaW1lbnNpb24ud2lkdGggLyB0aGlzLnNhbXBsZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucHhQZXJVbml0Q2FjaGVbdW5pdF07XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHRvUHgobGVuZ3RoKTogbnVtYmVyIHtcbiAgICB2YXIgdW5pdFJlID0gL15cXHMqKFsrLV0/W1xcZFxcLl0qKVxccyooLiopXFxzKiQvaTtcbiAgICB2YXIgbWF0Y2ggPSB1bml0UmUuZXhlYyhsZW5ndGgpO1xuICAgIGlmIChtYXRjaCAhPSBudWxsICYmIG1hdGNoLmxlbmd0aCA+IDIpIHtcbiAgICAgIGNvbnN0IGJhcmUgPSBtYXRjaFsxXSA9PT0gJyc7XG4gICAgICBjb25zdCB2YWwgPSBiYXJlID8gMSA6IE51bWJlcihtYXRjaFsxXSk7XG4gICAgICBjb25zdCB1bml0ID0gbWF0Y2hbMl07XG4gICAgICBjb25zdCB2YWxpZCA9ICFpc05hTih2YWwpICYmIHVuaXQ7XG4gICAgICBpZiAodmFsaWQpIHtcbiAgICAgICAgcmV0dXJuIHVuaXQgPT0gJ3B4JyA/IHZhbCA6IHRoaXMucHhQZXJVbml0KHVuaXQpICogdmFsO1xuICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFcnJvciBwYXJzaW5nIGxlbmd0aCcpO1xuICB9XG59XG4iXX0=