/**
 * @fileoverview added by tsickle
 * Generated from: lib/toolbar/pdf-zoom-toolbar/pdf-zoom-dropdown/pdf-zoom-dropdown.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, Input, ElementRef } from '@angular/core';
/**
 * @record
 */
function ZoomLevel() { }
if (false) {
    /** @type {?} */
    ZoomLevel.prototype.id;
    /** @type {?} */
    ZoomLevel.prototype.dataL10nId;
    /** @type {?} */
    ZoomLevel.prototype.dataL10nArgs;
    /** @type {?} */
    ZoomLevel.prototype.value;
    /** @type {?} */
    ZoomLevel.prototype.displayValue;
}
var PdfZoomDropdownComponent = /** @class */ (function () {
    function PdfZoomDropdownComponent(element) {
        this.element = element;
        this._zoomLevels = [];
    }
    Object.defineProperty(PdfZoomDropdownComponent.prototype, "zoomLevels", {
        // ['auto', 'page-actual', 'page-fit', 'page-width', 0.5, 0.75, 1, 1.25, 1.5, 2, 3, 4];
        set: 
        // ['auto', 'page-actual', 'page-fit', 'page-width', 0.5, 0.75, 1, 1.25, 1.5, 2, 3, 4];
        /**
         * @param {?} levels
         * @return {?}
         */
        function (levels) {
            var _this = this;
            this._zoomLevels = levels.map((/**
             * @param {?} l
             * @return {?}
             */
            function (l) { return _this.valueToZoomLevel(l); }));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PdfZoomDropdownComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (typeof document !== 'undefined') {
            /** @type {?} */
            var callback_1 = (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                document.removeEventListener('localized', callback_1);
            });
            document.addEventListener('localized', callback_1);
        }
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    PdfZoomDropdownComponent.prototype.valueToZoomLevel = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value.toString().endsWith('%')) {
            value = value.toString().replace('%', '');
            value = Number(value) / 100;
        }
        /** @type {?} */
        var numericalValue = Number(value);
        if (!numericalValue) {
            /** @type {?} */
            var v = String(value);
            return {
                id: this.snakeToCamel(value + 'Option'),
                value: v,
                dataL10nId: 'page_scale_' + v.replace('page-', ''),
                dataL10nArgs: undefined,
                displayValue: v,
            };
        }
        /** @type {?} */
        var percentage = Math.round(numericalValue * 100);
        return {
            id: "scale_" + percentage,
            value: String(numericalValue),
            dataL10nId: 'page_scale_percent',
            dataL10nArgs: "{ \"scale\": " + percentage + " }",
            displayValue: String(percentage) + '%',
        };
    };
    /**
     * @private
     * @param {?} str
     * @return {?}
     */
    PdfZoomDropdownComponent.prototype.snakeToCamel = /**
     * @private
     * @param {?} str
     * @return {?}
     */
    function (str) {
        // idea found here: https://hisk.io/javascript-snake-to-camel/
        return str.replace(/([-_][a-z])/g, (/**
         * @param {?} group
         * @return {?}
         */
        function (group) { return group.toUpperCase().replace('-', '').replace('_', ''); }));
    };
    PdfZoomDropdownComponent.decorators = [
        { type: Component, args: [{
                    selector: 'pdf-zoom-dropdown',
                    template: "<span id=\"scaleSelectContainer\">\n  <select\n    id=\"scaleSelect\"\n    title=\"Zoom\"\n    data-l10n-id=\"zoom\"\n    #sizeSelector\n  >\n    <option *ngFor=\"let level of _zoomLevels\"\n      [id]=\"level.id\"\n      [attr.value]=\"level.value\"\n      [attr.data-l10n-id]=\"level.dataL10nId\"\n      [attr.data-l10n-args]=\"level.dataL10nArgs\">\n      {{level.displayValue}}\n    </option>\n    <option\n    id=\"customScaleOption\"\n    title=\"\"\n    value=\"custom\"\n    disabled=\"disabled\"\n    hidden=\"true\"\n  ></option>\n\n  </select>\n</span>\n",
                    styles: ["select{font-size:12px;height:26px;cursor:pointer;border-radius:2px;border-width:1px;border-style:solid}#customScaleOption{display:none}"]
                }] }
    ];
    /** @nocollapse */
    PdfZoomDropdownComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    PdfZoomDropdownComponent.propDecorators = {
        zoomLevels: [{ type: Input }],
        sizeSelector: [{ type: ViewChild, args: ['sizeSelector',] }]
    };
    return PdfZoomDropdownComponent;
}());
export { PdfZoomDropdownComponent };
if (false) {
    /** @type {?} */
    PdfZoomDropdownComponent.prototype._zoomLevels;
    /** @type {?} */
    PdfZoomDropdownComponent.prototype.sizeSelector;
    /**
     * @type {?}
     * @private
     */
    PdfZoomDropdownComponent.prototype.element;
}
//# sourceMappingURL=data:application/json;base64,