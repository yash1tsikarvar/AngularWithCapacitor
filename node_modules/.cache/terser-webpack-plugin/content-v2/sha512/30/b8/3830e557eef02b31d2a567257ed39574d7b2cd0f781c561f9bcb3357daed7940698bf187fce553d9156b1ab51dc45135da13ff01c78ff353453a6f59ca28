{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{LSHg:function(module,__webpack_exports__,__webpack_require__){\"use strict\";var tslib_es6=__webpack_require__(\"mrSG\"),core=__webpack_require__(\"8Y7J\"),Observable=__webpack_require__(\"HDdC\"),isArray=(__webpack_require__(\"2Vo4\"),__webpack_require__(\"Cfvw\"),__webpack_require__(\"PqYM\"),__webpack_require__(\"XNiG\"),__webpack_require__(\"DH7j\")),isFunction=__webpack_require__(\"n6bG\"),map=__webpack_require__(\"lJxs\");__webpack_require__(\"VRyK\"),__webpack_require__(\"jtHE\"),__webpack_require__(\"quSY\"),__webpack_require__(\"8Qeq\"),__webpack_require__(\"z+Ro\"),__webpack_require__(\"LRne\"),__webpack_require__(\"z6cu\"),__webpack_require__(\"5+tZ\"),__webpack_require__(\"l7GE\"),__webpack_require__(\"ZUHj\"),__webpack_require__(\"eIep\"),__webpack_require__(\"UXun\"),__webpack_require__(\"/uUt\"),__webpack_require__(\"1G5W\"),__webpack_require__(\"JX91\"),__webpack_require__(\"zP0r\"),__webpack_require__(\"oB13\"),__webpack_require__(\"SVse\"),__webpack_require__.d(__webpack_exports__,\"a\",(function(){return AgmCoreModule})),__webpack_require__.d(__webpack_exports__,\"b\",(function(){return LAZY_MAPS_API_CONFIG})),__webpack_require__.d(__webpack_exports__,\"c\",(function(){return LazyMapsAPILoader})),__webpack_require__.d(__webpack_exports__,\"d\",(function(){return MapsAPILoader})),__webpack_require__.d(__webpack_exports__,\"e\",(function(){return WindowRef})),__webpack_require__.d(__webpack_exports__,\"f\",(function(){return DocumentRef}));let MapsAPILoader=class{};var PolylineManager_1;PolylineManager_1=class{constructor(_mapsWrapper,_zone){this._mapsWrapper=_mapsWrapper,this._zone=_zone,this._polylines=new Map}static _convertPoints(line){return line._getPoints().map(point=>({lat:point.latitude,lng:point.longitude}))}static _convertPath(path){const symbolPath=google.maps.SymbolPath[path];return\"number\"==typeof symbolPath?symbolPath:path}static _convertIcons(line){const icons=line._getIcons().map(agmIcon=>({fixedRotation:agmIcon.fixedRotation,offset:agmIcon.offset,repeat:agmIcon.repeat,icon:{anchor:new google.maps.Point(agmIcon.anchorX,agmIcon.anchorY),fillColor:agmIcon.fillColor,fillOpacity:agmIcon.fillOpacity,path:PolylineManager_1._convertPath(agmIcon.path),rotation:agmIcon.rotation,scale:agmIcon.scale,strokeColor:agmIcon.strokeColor,strokeOpacity:agmIcon.strokeOpacity,strokeWeight:agmIcon.strokeWeight}}));return icons.forEach(icon=>{Object.entries(icon).forEach(([key,val])=>{void 0===val&&delete icon[key]}),void 0!==icon.icon.anchor.x&&void 0!==icon.icon.anchor.y||delete icon.icon.anchor}),icons}addPolyline(line){const polylinePromise=this._mapsWrapper.getNativeMap().then(()=>[PolylineManager_1._convertPoints(line),PolylineManager_1._convertIcons(line)]).then(([path,icons])=>this._mapsWrapper.createPolyline({clickable:line.clickable,draggable:line.draggable,editable:line.editable,geodesic:line.geodesic,strokeColor:line.strokeColor,strokeOpacity:line.strokeOpacity,strokeWeight:line.strokeWeight,visible:line.visible,zIndex:line.zIndex,path:path,icons:icons}));this._polylines.set(line,polylinePromise)}updatePolylinePoints(line){const path=PolylineManager_1._convertPoints(line),m=this._polylines.get(line);return null==m?Promise.resolve():m.then(l=>this._zone.run(()=>{l.setPath(path)}))}updateIconSequences(line){return Object(tslib_es6.a)(this,void 0,void 0,(function*(){yield this._mapsWrapper.getNativeMap();const icons=PolylineManager_1._convertIcons(line),m=this._polylines.get(line);if(null!=m)return m.then(l=>this._zone.run(()=>l.setOptions({icons:icons})))}))}setPolylineOptions(line,options){return this._polylines.get(line).then(l=>{l.setOptions(options)})}deletePolyline(line){const m=this._polylines.get(line);return null==m?Promise.resolve():m.then(l=>this._zone.run(()=>{l.setMap(null),this._polylines.delete(line)}))}getMVCPath(agmPolyline){return Object(tslib_es6.a)(this,void 0,void 0,(function*(){return(yield this._polylines.get(agmPolyline)).getPath()}))}getPath(agmPolyline){return Object(tslib_es6.a)(this,void 0,void 0,(function*(){return(yield this.getMVCPath(agmPolyline)).getArray()}))}createEventObservable(eventName,line){return new Observable.a(observer=>{this._polylines.get(line).then(l=>{l.addListener(eventName,e=>this._zone.run(()=>observer.next(e)))})})}createPathEventObservable(line){return Object(tslib_es6.a)(this,void 0,void 0,(function*(){return function(array){const eventNames=[\"insert_at\",\"remove_at\",\"set_at\"];return function fromEventPattern(addHandler,removeHandler,resultSelector){return resultSelector?fromEventPattern(addHandler,removeHandler).pipe(Object(map.a)(args=>Object(isArray.a)(args)?resultSelector(...args):resultSelector(args))):new Observable.a(subscriber=>{const handler=(...e)=>subscriber.next(1===e.length?e[0]:e);let retValue;try{retValue=addHandler(handler)}catch(err){return void subscriber.error(err)}if(Object(isFunction.a)(removeHandler))return()=>removeHandler(handler,retValue)})}(handler=>eventNames.map(evName=>array.addListener(evName,(index,previous)=>handler.apply(array,[{newArr:array.getArray(),evName:evName,index:index,previous:previous}]))),(_handler,evListeners)=>evListeners.forEach(evListener=>evListener.remove()))}(yield this.getMVCPath(line))}))}};class WindowRef{getNativeWindow(){return window}}class DocumentRef{getNativeDocument(){return document}}const BROWSER_GLOBALS_PROVIDERS=[WindowRef,DocumentRef];var GoogleMapsScriptProtocol=function(GoogleMapsScriptProtocol){return GoogleMapsScriptProtocol[GoogleMapsScriptProtocol.HTTP=1]=\"HTTP\",GoogleMapsScriptProtocol[GoogleMapsScriptProtocol.HTTPS=2]=\"HTTPS\",GoogleMapsScriptProtocol[GoogleMapsScriptProtocol.AUTO=3]=\"AUTO\",GoogleMapsScriptProtocol}({});const LAZY_MAPS_API_CONFIG=new core.InjectionToken(\"angular-google-maps LAZY_MAPS_API_CONFIG\");let LazyMapsAPILoader=class extends MapsAPILoader{constructor(config=null,w,d,localeId){super(),this.localeId=localeId,this._SCRIPT_ID=\"agmGoogleMapsApiScript\",this.callbackName=\"agmLazyMapsAPILoader\",this._config=config||{},this._windowRef=w,this._documentRef=d}load(){const window=this._windowRef.getNativeWindow();if(window.google&&window.google.maps)return Promise.resolve();if(this._scriptLoadingPromise)return this._scriptLoadingPromise;const scriptOnPage=this._documentRef.getNativeDocument().getElementById(this._SCRIPT_ID);if(scriptOnPage)return this._assignScriptLoadingPromise(scriptOnPage),this._scriptLoadingPromise;const script=this._documentRef.getNativeDocument().createElement(\"script\");return script.type=\"text/javascript\",script.async=!0,script.defer=!0,script.id=this._SCRIPT_ID,script.src=this._getScriptSrc(this.callbackName),this._assignScriptLoadingPromise(script),this._documentRef.getNativeDocument().body.appendChild(script),this._scriptLoadingPromise}_assignScriptLoadingPromise(scriptElem){this._scriptLoadingPromise=new Promise((resolve,reject)=>{this._windowRef.getNativeWindow()[this.callbackName]=()=>{resolve()},scriptElem.onerror=error=>{reject(error)}})}_getScriptSrc(callbackName){let protocol;switch(this._config&&this._config.protocol||GoogleMapsScriptProtocol.HTTPS){case GoogleMapsScriptProtocol.AUTO:protocol=\"\";break;case GoogleMapsScriptProtocol.HTTP:protocol=\"http:\";break;case GoogleMapsScriptProtocol.HTTPS:protocol=\"https:\"}const queryParams={v:this._config.apiVersion||\"quarterly\",callback:callbackName,key:this._config.apiKey,client:this._config.clientId,channel:this._config.channel,libraries:this._config.libraries,region:this._config.region,language:this._config.language||\"en-US\"!==this.localeId?this.localeId:null};return`${protocol}//${this._config.hostAndPath||\"maps.googleapis.com/maps/api/js\"}?${Object.keys(queryParams).filter(k=>null!=queryParams[k]).filter(k=>!Array.isArray(queryParams[k])||Array.isArray(queryParams[k])&&queryParams[k].length>0).map(k=>{let i=queryParams[k];return Array.isArray(i)?{key:k,value:i.join(\",\")}:{key:k,value:queryParams[k]}}).map(entry=>`${entry.key}=${entry.value}`).join(\"&\")}`}};var AgmCoreModule_1;let AgmCoreModule=AgmCoreModule_1=class{static forRoot(lazyMapsAPILoaderConfig){return{ngModule:AgmCoreModule_1,providers:[...BROWSER_GLOBALS_PROVIDERS,{provide:MapsAPILoader,useClass:LazyMapsAPILoader},{provide:LAZY_MAPS_API_CONFIG,useValue:lazyMapsAPILoaderConfig}]}}}}}]);","extractedComments":[]}