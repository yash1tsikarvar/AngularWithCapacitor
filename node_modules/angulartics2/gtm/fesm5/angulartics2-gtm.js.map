{
  "version": 3,
  "file": "angulartics2-gtm.js",
  "sources": [
    "ng://angulartics2/gtm/src/lib/providers/gtm/gtm.ts"
  ],
  "sourcesContent": [
    "import { Injectable } from '@angular/core';\n\nimport { Angulartics2, GoogleTagManagerSettings } from 'angulartics2';\n\ndeclare var dataLayer: any;\n\nexport class GoogleTagManagerDefaults implements GoogleTagManagerSettings {\n  userId = null;\n}\n\n@Injectable()\nexport class Angulartics2GoogleTagManager {\n\n  constructor(\n    protected angulartics2: Angulartics2,\n  ) {\n    // The dataLayer needs to be initialized\n    if (typeof dataLayer !== 'undefined' && dataLayer) {\n      dataLayer = (<any>window).dataLayer = (<any>window).dataLayer || [];\n    }\n    const defaults = new GoogleTagManagerDefaults;\n    // Set the default settings for this module\n    this.angulartics2.settings.gtm = { ...defaults, ...this.angulartics2.settings.gtm };\n\n    this.angulartics2.pageTrack\n      .pipe(this.angulartics2.filterDeveloperMode())\n      .subscribe((x) => this.pageTrack(x.path));\n    this.angulartics2.eventTrack\n      .pipe(this.angulartics2.filterDeveloperMode())\n      .subscribe((x) => this.eventTrack(x.action, x.properties));\n    this.angulartics2.exceptionTrack\n      .pipe(this.angulartics2.filterDeveloperMode())\n      .subscribe((x: any) => this.exceptionTrack(x));\n    this.angulartics2.setUsername\n      .subscribe((x: string) => this.setUsername(x));\n  }\n\n  pageTrack(path: string) {\n    if (typeof dataLayer !== 'undefined' && dataLayer) {\n      dataLayer.push({\n        'event': 'Page View',\n        'content-name': path,\n        'userId': this.angulartics2.settings.gtm.userId\n      });\n    }\n  }\n\n  /**\n   * Send interactions to the dataLayer, i.e. for event tracking in Google Analytics\n   *\n   * @param action associated with the event\n   */\n  eventTrack(action: string, properties: any) {\n    // TODO: make interface\n    //  @param {string} properties.category\n    //  @param {string} [properties.label]\n    //  @param {number} [properties.value]\n    //  @param {boolean} [properties.noninteraction]\n    // Set a default GTM category\n    properties = properties || {};\n\n    if (typeof dataLayer !== 'undefined' && dataLayer) {\n      dataLayer.push({\n        event: properties.event || 'interaction',\n        target: properties.category || 'Event',\n        action: action,\n        label: properties.label,\n        value: properties.value,\n        interactionType: properties.noninteraction,\n        userId: this.angulartics2.settings.gtm.userId,\n        ...properties.gtmCustom\n      });\n    }\n  }\n\n  /**\n   * Exception Track Event in GTM\n   *\n   */\n  exceptionTrack(properties: any) {\n    // TODO: make interface\n    //  @param {Object} properties\n    //  @param {string} properties.appId\n    //  @param {string} properties.appName\n    //  @param {string} properties.appVersion\n    //  @param {string} [properties.description]\n    //  @param {boolean} [properties.fatal]\n    if (! properties || ! properties.appId || ! properties.appName || ! properties.appVersion) {\n      console.error('Must be setted appId, appName and appVersion.');\n      return;\n    }\n\n    if (properties.fatal === undefined) {\n      console.log('No \"fatal\" provided, sending with fatal=true');\n      properties.exFatal = true;\n    }\n\n    properties.exDescription = properties.event ? properties.event.stack : properties.description;\n\n    this.eventTrack(`Exception thrown for ${properties.appName} <${properties.appId}@${properties.appVersion}>`, {\n      'category': 'Exception',\n      'label': properties.exDescription\n    });\n  }\n\n  /**\n   * Set userId for use with Universal Analytics User ID feature\n   *\n   * @param userId used to identify user cross-device in Google Analytics\n   */\n  setUsername(userId: string) {\n    this.angulartics2.settings.gtm.userId = userId;\n  }\n}\n"
  ],
  "names": [],
  "mappings": ";;;;;;;AAAA,AAMA,IAAA,wBAAA,kBAAA,YAAA;;QACA,IAAA,CAAA,MAAA,GAAW,IAAI,CAAf;;IACA,OAAA,wBAAA,CAAA;;;;;;;QASI,IAAI,KAAR,GAAA,IAAA,CAAA;QACA,IAAM,CAAN,YAAA,GAAA,YAAA,CAAA;;QAEI,IAAJ,OAAA,SAAA,KAAA,WAAA,IAAA,SAAA,EAAA;;SAEA;QAEI,qBAAJ,QAAA,GAAA,IAAA,wBAAA,CAAA;;QAEA,IAAA,CAAO,YAAY,CAAnB,QAA4B,CAAC,GAA7B,GAAA,MAAyC,CAAzC,MAAgD,CAAhD,EAAA,EAAA,QAAA,EAAA,IAAA,CAAA,YAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA;QACI,IAAI,CAAC,YAAY,CAAC,SAAtB;aACO,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,mBAAmB,EAAE,CAAC;aAC7C,SAAS,CAAC,UAAjB,CAA4B,EAA5B,EAAA,OAAuC,KAAvC,CAAA,SAAA,CAAA,CAAA,CAAA,IAAA,CAA8D,CAAC,EAAE,CAAjE,CAAA;QACI,IAAI,CAAC,YAAY,CAAC,UAAtB;aACO,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,mBAAmB,EAAE,CAAC;aAC7C,SAAS,CAAC,UAAjB,CAAiC,EAAjC,EAAA,OAAA,KAAiD,CAAC,UAAlD,CAAA,CAAA,CAAA,MAAA,EAAA,CAAA,CAAA,UAAA,CAAA,CAAA,EAAA,CAAA,CAAA;QACI,IAAI,CAAC,YAAY,CAAC,cAAtB;aACO,IAAP,CAAA,IAAgB,CAAC,YAAoB,CAArC,mBAAA,EAAA,CAAA;aACA,SAAA,CAAA,UAAA,CAAA,EAAA,EAAA,OAAA,KAAA,CAAA,cAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA;;;;;;;;IAKA,4BAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAA,IAAA,EAAA;QACA,IAAA,OAAA,SAAA,KAAA,WAAA,IAAA,SAAA,EAAA;YACA,SAAA,CAAA,IAAkB,CAAlB;gBACA,OAAA,EAAA,WAAA;gBACA,cAAA,EAAA,IAAA;gBACA,QAAA,EAAA,IAAA,CAAA,YAAA,CAAA,QAAA,CAAA,GAAA,CAAA,MAAA;;;;;;;;;;;;;;;;;;QA2BA,UAAA,GAAA,UAAA,IAAA,EAAA,CAAA;QACA,IAAA,OAAA,SAAA,KAAA,WAAA,IAAA,SAAA,EAAA;;;;;;;;;;;;;;;;;;QAiBA,IAAA,CAAA,UAAA,IAAA,CAAA,UAAA,CAAA,KAAA,IAAA,CAAA,UAAA,CAAA,OAAA,IAAA,CAAA,UAAA,CAAA,UAAA,EAAA;YAEQ,OAAR,CAAA,KAAA,CAAA,+CAAA,CAAA,CAAA;YACM,OAAO;SACb;QACA,IAAA,UAAA,CAAA,KAAA,KAAA,SAAA,EAAA;YAEA,OAAe,CAAf,GAAA,CAAA,8CAAkE,CAAC,CAAnE;YAEQ,UAAR,CAAmB,OAAnB,GAAA,IAAA,CAAA;SACA;QACA,UAAA,CAAa,aAAa,GAA1B,UAAuC,CAAvC,KAAA,GAAA,UAAA,CAAA,KAAA,CAAA,KAAA,GAAA,UAAA,CAAA,WAAA,CAAA;QACA,IAAA,CAAA,UAAA,CAAA,uBAAA,GAAA,UAAA,CAAA,OAAA,GAAA,IAAA,GAAA,UAAA,CAAA,KAAA,GAAA,GAAA,GAAA,UAAA,CAAA,UAAA,GAAA,GAAA,EAAA;YACA,UAAA,EAAA,WAAA;;;;;;;;;;;;KA7FA,CAAA;;;AARA,4BAAA,CAAA,UAAA,GAAA;;;;;;;;;;;;;;;"
}
