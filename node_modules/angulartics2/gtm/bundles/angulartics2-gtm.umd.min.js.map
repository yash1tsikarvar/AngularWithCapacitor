{
  "version": 3,
  "file": "angulartics2-gtm.umd.min.js",
  "sources": [
    "ng://angulartics2/gtm/src/lib/providers/gtm/gtm.ts"
  ],
  "sourcesContent": [
    "import { Injectable } from '@angular/core';\n\nimport { Angulartics2, GoogleTagManagerSettings } from 'angulartics2';\n\ndeclare var dataLayer: any;\n\nexport class GoogleTagManagerDefaults implements GoogleTagManagerSettings {\n  userId = null;\n}\n\n@Injectable()\nexport class Angulartics2GoogleTagManager {\n\n  constructor(\n    protected angulartics2: Angulartics2,\n  ) {\n    // The dataLayer needs to be initialized\n    if (typeof dataLayer !== 'undefined' && dataLayer) {\n      dataLayer = (<any>window).dataLayer = (<any>window).dataLayer || [];\n    }\n    const defaults = new GoogleTagManagerDefaults;\n    // Set the default settings for this module\n    this.angulartics2.settings.gtm = { ...defaults, ...this.angulartics2.settings.gtm };\n\n    this.angulartics2.pageTrack\n      .pipe(this.angulartics2.filterDeveloperMode())\n      .subscribe((x) => this.pageTrack(x.path));\n    this.angulartics2.eventTrack\n      .pipe(this.angulartics2.filterDeveloperMode())\n      .subscribe((x) => this.eventTrack(x.action, x.properties));\n    this.angulartics2.exceptionTrack\n      .pipe(this.angulartics2.filterDeveloperMode())\n      .subscribe((x: any) => this.exceptionTrack(x));\n    this.angulartics2.setUsername\n      .subscribe((x: string) => this.setUsername(x));\n  }\n\n  pageTrack(path: string) {\n    if (typeof dataLayer !== 'undefined' && dataLayer) {\n      dataLayer.push({\n        'event': 'Page View',\n        'content-name': path,\n        'userId': this.angulartics2.settings.gtm.userId\n      });\n    }\n  }\n\n  /**\n   * Send interactions to the dataLayer, i.e. for event tracking in Google Analytics\n   *\n   * @param action associated with the event\n   */\n  eventTrack(action: string, properties: any) {\n    // TODO: make interface\n    //  @param {string} properties.category\n    //  @param {string} [properties.label]\n    //  @param {number} [properties.value]\n    //  @param {boolean} [properties.noninteraction]\n    // Set a default GTM category\n    properties = properties || {};\n\n    if (typeof dataLayer !== 'undefined' && dataLayer) {\n      dataLayer.push({\n        event: properties.event || 'interaction',\n        target: properties.category || 'Event',\n        action: action,\n        label: properties.label,\n        value: properties.value,\n        interactionType: properties.noninteraction,\n        userId: this.angulartics2.settings.gtm.userId,\n        ...properties.gtmCustom\n      });\n    }\n  }\n\n  /**\n   * Exception Track Event in GTM\n   *\n   */\n  exceptionTrack(properties: any) {\n    // TODO: make interface\n    //  @param {Object} properties\n    //  @param {string} properties.appId\n    //  @param {string} properties.appName\n    //  @param {string} properties.appVersion\n    //  @param {string} [properties.description]\n    //  @param {boolean} [properties.fatal]\n    if (! properties || ! properties.appId || ! properties.appName || ! properties.appVersion) {\n      console.error('Must be setted appId, appName and appVersion.');\n      return;\n    }\n\n    if (properties.fatal === undefined) {\n      console.log('No \"fatal\" provided, sending with fatal=true');\n      properties.exFatal = true;\n    }\n\n    properties.exDescription = properties.event ? properties.event.stack : properties.description;\n\n    this.eventTrack(`Exception thrown for ${properties.appName} <${properties.appId}@${properties.appVersion}>`, {\n      'category': 'Exception',\n      'label': properties.exDescription\n    });\n  }\n\n  /**\n   * Set userId for use with Universal Analytics User ID feature\n   *\n   * @param userId used to identify user cross-device in Google Analytics\n   */\n  setUsername(userId: string) {\n    this.angulartics2.settings.gtm.userId = userId;\n  }\n}\n"
  ],
  "names": [
    "GoogleTagManagerDefaults",
    "this",
    "userId",
    "_this",
    "angulartics2",
    "dataLayer",
    "defaults",
    "settings",
    "gtm",
    "Object",
    "assign",
    "pageTrack",
    "pipe",
    "filterDeveloperMode",
    "subscribe",
    "x",
    "path",
    "eventTrack",
    "action",
    "properties",
    "exceptionTrack",
    "Angulartics2GoogleTagManager",
    "prototype",
    "push",
    "event",
    "content-name",
    "appId",
    "appName",
    "appVersion",
    "fatal",
    "undefined",
    "console",
    "log",
    "exFatal",
    "exDescription",
    "stack",
    "description",
    "category",
    "error",
    "decorators"
  ],
  "mappings": "uWAAA,IAMAA,aACAC,KAAAC,OAAW,iCAUP,IAAIC,EAARF,KACAA,KAAAG,aAAAA,EAEA,oBAAAC,WAAAA,6DAII,IAAJC,EAAA,IAAAN,EAEAC,KAAOG,aAAPG,SAA6BC,IAA7BC,OAAAC,OAAA,GAAAJ,EAAAL,KAAAG,aAAAG,SAAAC,KACIP,KAAKG,aAAaO,UACfC,KAAKX,KAAKG,aAAaS,uBACvBC,UAAU,SAAjBC,GAAA,OAAuCZ,EAAvCQ,UAAAI,EAAAC,QACIf,KAAKG,aAAaa,WACfL,KAAKX,KAAKG,aAAaS,uBACvBC,UAAU,SAAjBC,GAAA,OAAAZ,EAAkDc,WAAlDF,EAAAG,OAAAH,EAAAI,cACIlB,KAAKG,aAAagB,eACfR,KAAPX,KAAiBG,aAAjBS,uBACAC,UAAA,SAAAC,GAAA,OAAAZ,EAAAiB,eAAAL,0FAKAM,EAAAC,UAAAX,UAAA,SAAAK,GACA,oBAAAX,WAAAA,WACAA,UAAAkB,KAAA,CACAC,MAAA,YACAC,eAAAT,EACAd,OAAAD,KAAAG,aAAAG,SAAAC,IAAAN,+CA2BAiB,EAAAA,GAAA,GACA,oBAAAd,WAAAA,2QAiBAc,GAAAA,EAAAO,OAAAP,EAAAQ,SAAAR,EAAAS,YAKAT,EAAAU,QAAAC,YAEAC,QAAAC,IAAA,gDAEQb,EAAWc,SAAnB,GAEAd,EAAae,cAAbf,EAAAK,MAAAL,EAAAK,MAAAW,MAAAhB,EAAAiB,YACAnC,KAAAgB,WAAA,wBAAAE,EAAAQ,QAAA,KAAAR,EAAAO,MAAA,IAAAP,EAAAS,WAAA,IAAA,CACAS,SAAA,qCAXQN,QAARO,MAAA,sIA1FAC,WAAA"
}
