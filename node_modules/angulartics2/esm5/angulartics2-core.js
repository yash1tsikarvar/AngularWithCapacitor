import * as tslib_1 from "tslib";
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { ReplaySubject } from 'rxjs/ReplaySubject';
import { filter } from 'rxjs/operators/filter';
import { DefaultConfig } from './angulartics2-config';
import { ANGULARTICS2_TOKEN } from './angulartics2-token';
import { RouterlessTracking } from './routerless';
var Angulartics2 = /** @class */ (function () {
    /**
     * @param {?} tracker
     * @param {?} setup
     */
    function Angulartics2(tracker, setup) {
        var _this = this;
        this.tracker = tracker;
        this.pageTrack = new ReplaySubject(10);
        this.eventTrack = new ReplaySubject(10);
        this.exceptionTrack = new ReplaySubject(10);
        this.setAlias = new ReplaySubject(10);
        this.setUsername = new ReplaySubject(10);
        this.setUserProperties = new ReplaySubject(10);
        this.setUserPropertiesOnce = new ReplaySubject(10);
        this.setSuperProperties = new ReplaySubject(10);
        this.setSuperPropertiesOnce = new ReplaySubject(10);
        this.userTimings = new ReplaySubject(10);
        var /** @type {?} */ defaultConfig = new DefaultConfig();
        this.settings = Object.assign({}, defaultConfig, setup.settings);
        this.settings.pageTracking = Object.assign({}, defaultConfig.pageTracking, setup.settings.pageTracking);
        this.tracker
            .trackLocation(this.settings)
            .subscribe(function (event) { return _this.trackUrlChange(event.url); });
    }
    /**
     * @deprecated
     * @param {?} value
     * @return {?}
     */
    Angulartics2.prototype.virtualPageviews = function (value) {
        this.settings.pageTracking.autoTrackVirtualPages = value;
    };
    /**
     * @deprecated
     * @param {?} routes
     * @return {?}
     */
    Angulartics2.prototype.excludeRoutes = function (routes) {
        this.settings.pageTracking.excludedRoutes = routes;
    };
    /**
     * @deprecated
     * @param {?} value
     * @return {?}
     */
    Angulartics2.prototype.withBase = function (value) {
        this.settings.pageTracking.basePath = value;
    };
    /**
     * @deprecated
     * @param {?} value
     * @return {?}
     */
    Angulartics2.prototype.clearIds = function (value) {
        this.settings.pageTracking.clearIds = value;
    };
    /**
     * @deprecated
     * @param {?} value
     * @return {?}
     */
    Angulartics2.prototype.developerMode = function (value) {
        this.settings.developerMode = value;
    };
    /**
     * filters all events when developer mode is true
     * @template T
     * @return {?}
     */
    Angulartics2.prototype.filterDeveloperMode = function () {
        var _this = this;
        return filter(function (value, index) { return !_this.settings.developerMode; });
    };
    /**
     * @param {?} url
     * @return {?}
     */
    Angulartics2.prototype.trackUrlChange = function (url) {
        if (this.settings.pageTracking.autoTrackVirtualPages && !this.matchesExcludedRoute(url)) {
            var /** @type {?} */ clearedUrl = this.clearUrl(url);
            var /** @type {?} */ path = void 0;
            if (this.settings.pageTracking.basePath.length) {
                path = this.settings.pageTracking.basePath + clearedUrl;
            }
            else {
                path = this.tracker.prepareExternalUrl(clearedUrl);
            }
            this.pageTrack.next({ path: path });
        }
    };
    /**
     * Use string literals or regular expressions to exclude routes
     * from automatic pageview tracking.
     *
     * @param {?} url location
     * @return {?}
     */
    Angulartics2.prototype.matchesExcludedRoute = function (url) {
        try {
            for (var _a = tslib_1.__values(this.settings.pageTracking.excludedRoutes), _b = _a.next(); !_b.done; _b = _a.next()) {
                var excludedRoute = _b.value;
                var /** @type {?} */ matchesRegex = excludedRoute instanceof RegExp && excludedRoute.test(url);
                if (matchesRegex || url.indexOf(/** @type {?} */ (excludedRoute)) !== -1) {
                    return true;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return false;
        var e_1, _c;
    };
    /**
     * Removes id's from tracked route.
     *  EX: `/project/12981/feature` becomes `/project/feature`
     *
     * @param {?} url current page path
     * @return {?}
     */
    Angulartics2.prototype.clearUrl = function (url) {
        var _this = this;
        if (this.settings.pageTracking.clearIds || this.settings.pageTracking.clearQueryParams ||
            this.settings.pageTracking.clearHash) {
            return url
                .split('/')
                .map(function (part) { return _this.settings.pageTracking.clearQueryParams ? part.split('?')[0] : part; })
                .map(function (part) { return _this.settings.pageTracking.clearHash ? part.split('#')[0] : part; })
                .filter(function (part) { return !_this.settings.pageTracking.clearIds || !part.match(_this.settings.pageTracking.idsRegExp); })
                .join('/');
        }
        return url;
    };
    return Angulartics2;
}());
export { Angulartics2 };
Angulartics2.decorators = [
    { type: Injectable },
];
/** @nocollapse */
Angulartics2.ctorParameters = function () { return [
    { type: RouterlessTracking, },
    { type: undefined, decorators: [{ type: Inject, args: [ANGULARTICS2_TOKEN,] },] },
]; };
function Angulartics2_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    Angulartics2.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    Angulartics2.ctorParameters;
    /** @type {?} */
    Angulartics2.prototype.settings;
    /** @type {?} */
    Angulartics2.prototype.pageTrack;
    /** @type {?} */
    Angulartics2.prototype.eventTrack;
    /** @type {?} */
    Angulartics2.prototype.exceptionTrack;
    /** @type {?} */
    Angulartics2.prototype.setAlias;
    /** @type {?} */
    Angulartics2.prototype.setUsername;
    /** @type {?} */
    Angulartics2.prototype.setUserProperties;
    /** @type {?} */
    Angulartics2.prototype.setUserPropertiesOnce;
    /** @type {?} */
    Angulartics2.prototype.setSuperProperties;
    /** @type {?} */
    Angulartics2.prototype.setSuperPropertiesOnce;
    /** @type {?} */
    Angulartics2.prototype.userTimings;
    /** @type {?} */
    Angulartics2.prototype.tracker;
}
//# sourceMappingURL=angulartics2-core.js.map
