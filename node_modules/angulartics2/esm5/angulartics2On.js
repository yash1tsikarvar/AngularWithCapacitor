/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, ElementRef, Injectable, Input, NgModule, Renderer2, } from '@angular/core';
import { Angulartics2 } from './angulartics2-core';
var Angulartics2On = /** @class */ (function () {
    /**
     * @param {?} elRef
     * @param {?} angulartics2
     * @param {?} renderer
     */
    function Angulartics2On(elRef, angulartics2, renderer) {
        this.elRef = elRef;
        this.angulartics2 = angulartics2;
        this.renderer = renderer;
        this.angularticsProperties = {};
    }
    /**
     * @return {?}
     */
    Angulartics2On.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.renderer.listen(this.elRef.nativeElement, this.angulartics2On || 'click', function (event) { return _this.eventTrack(event); });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    Angulartics2On.prototype.eventTrack = function (event) {
        var /** @type {?} */ action = this.angularticsAction; // || this.inferEventName();
        var /** @type {?} */ properties = Object.assign({}, this.angularticsProperties, { eventType: event.type });
        if (this.angularticsCategory) {
            properties.category = this.angularticsCategory;
        }
        if (this.angularticsLabel) {
            properties.label = this.angularticsLabel;
        }
        if (this.angularticsValue) {
            properties.value = this.angularticsValue;
        }
        this.angulartics2.eventTrack.next({
            action: action,
            properties: properties,
        });
    };
    return Angulartics2On;
}());
export { Angulartics2On };
Angulartics2On.decorators = [
    { type: Injectable },
    { type: Directive, args: [{ selector: '[angulartics2On]' },] },
];
/*private isCommand() {
    return ['a:', 'button:', 'button:button', 'button:submit', 'input:button', 'input:submit'].indexOf(
      getDOM().tagName(this.el).toLowerCase() + ':' + (getDOM().type(this.el) || '')) >= 0;
  }

  private inferEventName() {
    if (this.isCommand()) return getDOM().getText(this.el) || getDOM().getValue(this.el);
    return getDOM().getProperty(this.el, 'id') || getDOM().getProperty(this.el, 'name') || getDOM().tagName(this.el);
  }*/
/** @nocollapse */
Angulartics2On.ctorParameters = function () { return [
    { type: ElementRef, },
    { type: Angulartics2, },
    { type: Renderer2, },
]; };
Angulartics2On.propDecorators = {
    "angulartics2On": [{ type: Input, args: ['angulartics2On',] },],
    "angularticsAction": [{ type: Input },],
    "angularticsCategory": [{ type: Input },],
    "angularticsLabel": [{ type: Input },],
    "angularticsValue": [{ type: Input },],
    "angularticsProperties": [{ type: Input },],
};
function Angulartics2On_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    Angulartics2On.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    Angulartics2On.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    Angulartics2On.propDecorators;
    /** @type {?} */
    Angulartics2On.prototype.angulartics2On;
    /** @type {?} */
    Angulartics2On.prototype.angularticsAction;
    /** @type {?} */
    Angulartics2On.prototype.angularticsCategory;
    /** @type {?} */
    Angulartics2On.prototype.angularticsLabel;
    /** @type {?} */
    Angulartics2On.prototype.angularticsValue;
    /** @type {?} */
    Angulartics2On.prototype.angularticsProperties;
    /** @type {?} */
    Angulartics2On.prototype.elRef;
    /** @type {?} */
    Angulartics2On.prototype.angulartics2;
    /** @type {?} */
    Angulartics2On.prototype.renderer;
}
var Angulartics2OnModule = /** @class */ (function () {
    function Angulartics2OnModule() {
    }
    return Angulartics2OnModule;
}());
export { Angulartics2OnModule };
Angulartics2OnModule.decorators = [
    { type: NgModule, args: [{
                declarations: [Angulartics2On],
                exports: [Angulartics2On],
            },] },
];
function Angulartics2OnModule_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    Angulartics2OnModule.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    Angulartics2OnModule.ctorParameters;
}
//# sourceMappingURL=angulartics2On.js.map
