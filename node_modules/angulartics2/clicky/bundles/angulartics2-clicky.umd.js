(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/platform-browser'), require('angulartics2')) :
    typeof define === 'function' && define.amd ? define('angulartics2/clicky', ['exports', '@angular/core', '@angular/platform-browser', 'angulartics2'], factory) :
    (factory((global.angulartics2 = global.angulartics2 || {}, global.angulartics2.clicky = {}),global.ng.core,global.ng.platformBrowser,global.angulartics2));
}(this, (function (exports,core,platformBrowser,angulartics2) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Angulartics2Clicky = (function () {
        /**
         * @param {?} angulartics2
         * @param {?} titleService
         */
        function Angulartics2Clicky(angulartics2$$1, titleService) {
            var _this = this;
            this.angulartics2 = angulartics2$$1;
            this.titleService = titleService;
            if (typeof clicky === 'undefined') {
                console.warn('Angulartics 2 Clicky Plugin: clicky global not found');
            }
            this.angulartics2.pageTrack
                .pipe(this.angulartics2.filterDeveloperMode())
                .subscribe(function (x) { return _this.pageTrack(x.path); });
            this.angulartics2.eventTrack
                .pipe(this.angulartics2.filterDeveloperMode())
                .subscribe(function (x) { return _this.eventOrGoalTrack(x.action, x.properties); });
        }
        /**
         * Track Page in Clicky
         *
         * @link https://clicky.com/help/custom/manual#log
         * @param {?} path location
         *
         * @return {?}
         */
        Angulartics2Clicky.prototype.pageTrack = function (path) {
            var /** @type {?} */ title = this.titleService.getTitle();
            clicky.log(path, title, 'pageview');
        };
        /**
         * Track Event Or Goal in Clicky
         *
         * @link https://clicky.com/help/custom/manual#log
         * @link https://clicky.com/help/custom/manual#goal
         * @param {?} action Action name
         * @param {?} properties Definition of 'properties.goal' determines goal vs event tracking
         *
         * @return {?}
         */
        Angulartics2Clicky.prototype.eventOrGoalTrack = function (action, properties) {
            if (typeof properties.goal === 'undefined') {
                var /** @type {?} */ title = properties.title || null;
                var /** @type {?} */ type = properties.type != null ? this.validateType(properties.type) : null;
                clicky.log(action, title, type);
            }
            else {
                var /** @type {?} */ goalId = properties.goal;
                var /** @type {?} */ revenue = properties.revenue;
                clicky.goal(goalId, revenue, !!properties.noQueue);
            }
        };
        /**
         * @param {?} type
         * @return {?}
         */
        Angulartics2Clicky.prototype.validateType = function (type) {
            var /** @type {?} */ EventType = ['pageview', 'click', 'download', 'outbound'];
            return EventType.indexOf(type) > -1 ? type : 'pageview';
        };
        return Angulartics2Clicky;
    }());
    Angulartics2Clicky.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    Angulartics2Clicky.ctorParameters = function () {
        return [
            { type: angulartics2.Angulartics2, },
            { type: platformBrowser.Title, },
        ];
    };

    exports.Angulartics2Clicky = Angulartics2Clicky;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=angulartics2-clicky.umd.js.map
