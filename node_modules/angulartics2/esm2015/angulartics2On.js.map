{
  "version": 3,
  "file": "angulartics2On.js",
  "sources": [
    "ng://angulartics2/src/lib/core/angulartics2On.ts"
  ],
  "sourcesContent": [
    "import {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  Injectable,\n  Input,\n  NgModule,\n  Renderer2,\n} from '@angular/core';\nimport { Angulartics2 } from './angulartics2-core';\n\n@Injectable()\n@Directive({ selector: '[angulartics2On]' })\nexport class Angulartics2On implements AfterContentInit {\n  @Input('angulartics2On') angulartics2On: string;\n  @Input() angularticsAction: string;\n  @Input() angularticsCategory: string;\n  @Input() angularticsLabel: string;\n  @Input() angularticsValue: string;\n  @Input() angularticsProperties: any = {};\n\n  constructor(\n    private elRef: ElementRef,\n    private angulartics2: Angulartics2,\n    private renderer: Renderer2\n  ) { }\n\n  ngAfterContentInit() {\n    this.renderer.listen(\n      this.elRef.nativeElement,\n      this.angulartics2On || 'click',\n      (event: Event) => this.eventTrack(event),\n    );\n  }\n\n  eventTrack(event: Event) {\n    const action = this.angularticsAction; // || this.inferEventName();\n    const properties: any = {\n      ...this.angularticsProperties,\n      eventType: event.type,\n    };\n\n    if (this.angularticsCategory) {\n      properties.category = this.angularticsCategory;\n    }\n    if (this.angularticsLabel) {\n      properties.label = this.angularticsLabel;\n    }\n    if (this.angularticsValue) {\n      properties.value = this.angularticsValue;\n    }\n\n    this.angulartics2.eventTrack.next({\n      action,\n      properties,\n    });\n  }\n\n  /*private isCommand() {\n    return ['a:', 'button:', 'button:button', 'button:submit', 'input:button', 'input:submit'].indexOf(\n      getDOM().tagName(this.el).toLowerCase() + ':' + (getDOM().type(this.el) || '')) >= 0;\n  }\n\n  private inferEventName() {\n    if (this.isCommand()) return getDOM().getText(this.el) || getDOM().getValue(this.el);\n    return getDOM().getProperty(this.el, 'id') || getDOM().getProperty(this.el, 'name') || getDOM().tagName(this.el);\n  }*/\n}\n\n@NgModule({\n  declarations: [Angulartics2On],\n  exports: [Angulartics2On],\n})\nexport class Angulartics2OnModule {}\n"
  ],
  "names": [],
  "mappings": ";;;;AAAA,OAAO,EAEL,SAAS,EACT,UAAU,EACV,UAAU,EACV,KAAK,EACL,QAAQ,EACR,SAAS,GACV,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,YAAY,EAAE,MAAM,qBAAqB,CAAC;AAInD,MAAM;;;;;;IAQJ,YACU,OACA,cACA;QAFA,UAAK,GAAL,KAAK;QACL,iBAAY,GAAZ,YAAY;QACZ,aAAQ,GAAR,QAAQ;qCALoB,EAAE;KAMnC;;;;IAEL,kBAAkB;QAChB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAClB,IAAI,CAAC,KAAK,CAAC,aAAa,EACxB,IAAI,CAAC,cAAc,IAAI,OAAO,EAC9B,CAAC,KAAY,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CACzC,CAAC;KACH;;;;;IAED,UAAU,CAAC,KAAY;QACrB,uBAAM,MAAM,GAAG,IAAI,CAAC,iBAAiB,CAAC;QACtC,uBAAM,UAAU,qBACX,IAAI,CAAC,qBAAqB,IAC7B,SAAS,EAAE,KAAK,CAAC,IAAI,GACtB,CAAC;QAEF,EAAE,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC;YAC7B,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC;SAChD;QACD,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;YAC1B,UAAU,CAAC,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC;SAC1C;QACD,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;YAC1B,UAAU,CAAC,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC;SAC1C;QAED,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC;YAChC,MAAM;YACN,UAAU;SACX,CAAC,CAAC;KACJ;;;YA7CF,UAAU;YACV,SAAS,SAAC,EAAE,QAAQ,EAAE,kBAAkB,EAAE;;;;;;;;;;;;;YATzC,UAAU;YAMH,YAAY;YAFnB,SAAS;;;+BAOR,KAAK,SAAC,gBAAgB;kCACtB,KAAK;oCACL,KAAK;iCACL,KAAK;iCACL,KAAK;sCACL,KAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDR,MAAM;;;YAJL,QAAQ,SAAC;gBACR,YAAY,EAAE,CAAC,cAAc,CAAC;gBAC9B,OAAO,EAAE,CAAC,cAAc,CAAC;aAC1B"
}
