(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs/BehaviorSubject'), require('tslib'), require('rxjs/ReplaySubject'), require('rxjs/operators/filter'), require('@angular/common'), require('@angular/router'), require('rxjs/operators/delay'), require('rxjs/operators/map')) :
  typeof define === 'function' && define.amd ? define('angulartics2', ['exports', '@angular/core', 'rxjs/BehaviorSubject', 'tslib', 'rxjs/ReplaySubject', 'rxjs/operators/filter', '@angular/common', '@angular/router', 'rxjs/operators/delay', 'rxjs/operators/map'], factory) :
  (factory((global.angulartics2 = {}),global.ng.core,global.Rx,global.tslib,global.Rx,global.Rx.Observable.prototype,global.ng.common,global.ng.router,global.Rx.Observable.prototype,global.Rx.Observable.prototype));
}(this, (function (exports,core,BehaviorSubject,tslib,ReplaySubject,filter,common,router,delay,map) { 'use strict';

  /**
   * @fileoverview added by tsickle
   * @suppress {checkTypes} checked by tsc
   */
  var DefaultConfig = (function () {
      function DefaultConfig() {
          this.pageTracking = {
              autoTrackVirtualPages: true,
              basePath: '',
              excludedRoutes: [],
              clearIds: false,
              clearHash: false,
              clearQueryParams: false,
              idsRegExp: /^\d+$|^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/,
          };
          this.developerMode = false;
          this.ga = {};
          this.appInsights = {};
          this.gtm = {};
      }
      return DefaultConfig;
  }());
  /**
   * @fileoverview added by tsickle
   * @suppress {checkTypes} checked by tsc
   */
  var /** @type {?} */ ANGULARTICS2_TOKEN = new core.InjectionToken('ANGULARTICS2');
  /**
   * @fileoverview added by tsickle
   * @suppress {checkTypes} checked by tsc
   */
  var RouterlessTracking = (function () {
      function RouterlessTracking() {
      }
      /**
       * @param {?} settings
       * @return {?}
       */
      RouterlessTracking.prototype.trackLocation = function (settings) {
          return new BehaviorSubject.BehaviorSubject({ url: '/' });
      };
      /**
       * @param {?} url
       * @return {?}
       */
      RouterlessTracking.prototype.prepareExternalUrl = function (url) {
          return url;
      };
      return RouterlessTracking;
  }());
  var Angulartics2 = (function () {
      /**
       * @param {?} tracker
       * @param {?} setup
       */
      function Angulartics2(tracker, setup) {
          var _this = this;
          this.tracker = tracker;
          this.pageTrack = new ReplaySubject.ReplaySubject(10);
          this.eventTrack = new ReplaySubject.ReplaySubject(10);
          this.exceptionTrack = new ReplaySubject.ReplaySubject(10);
          this.setAlias = new ReplaySubject.ReplaySubject(10);
          this.setUsername = new ReplaySubject.ReplaySubject(10);
          this.setUserProperties = new ReplaySubject.ReplaySubject(10);
          this.setUserPropertiesOnce = new ReplaySubject.ReplaySubject(10);
          this.setSuperProperties = new ReplaySubject.ReplaySubject(10);
          this.setSuperPropertiesOnce = new ReplaySubject.ReplaySubject(10);
          this.userTimings = new ReplaySubject.ReplaySubject(10);
          var /** @type {?} */ defaultConfig = new DefaultConfig();
          this.settings = Object.assign({}, defaultConfig, setup.settings);
          this.settings.pageTracking = Object.assign({}, defaultConfig.pageTracking, setup.settings.pageTracking);
          this.tracker
              .trackLocation(this.settings)
              .subscribe(function (event) { return _this.trackUrlChange(event.url); });
      }
      /**
       * @deprecated
       * @param {?} value
       * @return {?}
       */
      Angulartics2.prototype.virtualPageviews = function (value) {
          this.settings.pageTracking.autoTrackVirtualPages = value;
      };
      /**
       * @deprecated
       * @param {?} routes
       * @return {?}
       */
      Angulartics2.prototype.excludeRoutes = function (routes) {
          this.settings.pageTracking.excludedRoutes = routes;
      };
      /**
       * @deprecated
       * @param {?} value
       * @return {?}
       */
      Angulartics2.prototype.withBase = function (value) {
          this.settings.pageTracking.basePath = value;
      };
      /**
       * @deprecated
       * @param {?} value
       * @return {?}
       */
      Angulartics2.prototype.clearIds = function (value) {
          this.settings.pageTracking.clearIds = value;
      };
      /**
       * @deprecated
       * @param {?} value
       * @return {?}
       */
      Angulartics2.prototype.developerMode = function (value) {
          this.settings.developerMode = value;
      };
      /**
       * filters all events when developer mode is true
       * @template T
       * @return {?}
       */
      Angulartics2.prototype.filterDeveloperMode = function () {
          var _this = this;
          return filter.filter(function (value, index) { return !_this.settings.developerMode; });
      };
      /**
       * @param {?} url
       * @return {?}
       */
      Angulartics2.prototype.trackUrlChange = function (url) {
          if (this.settings.pageTracking.autoTrackVirtualPages && !this.matchesExcludedRoute(url)) {
              var /** @type {?} */ clearedUrl = this.clearUrl(url);
              var /** @type {?} */ path = void 0;
              if (this.settings.pageTracking.basePath.length) {
                  path = this.settings.pageTracking.basePath + clearedUrl;
              }
              else {
                  path = this.tracker.prepareExternalUrl(clearedUrl);
              }
              this.pageTrack.next({ path: path });
          }
      };
      /**
       * Use string literals or regular expressions to exclude routes
       * from automatic pageview tracking.
       *
       * @param {?} url location
       * @return {?}
       */
      Angulartics2.prototype.matchesExcludedRoute = function (url) {
          try {
              for (var _a = tslib.__values(this.settings.pageTracking.excludedRoutes), _b = _a.next(); !_b.done; _b = _a.next()) {
                  var excludedRoute = _b.value;
                  var /** @type {?} */ matchesRegex = excludedRoute instanceof RegExp && excludedRoute.test(url);
                  if (matchesRegex || url.indexOf(/** @type {?} */ (excludedRoute)) !== -1) {
                      return true;
                  }
              }
          }
          catch (e_1_1) {
              e_1 = { error: e_1_1 };
          }
          finally {
              try {
                  if (_b && !_b.done && (_c = _a.return))
                      _c.call(_a);
              }
              finally {
                  if (e_1)
                      throw e_1.error;
              }
          }
          return false;
          var e_1, _c;
      };
      /**
       * Removes id's from tracked route.
       *  EX: `/project/12981/feature` becomes `/project/feature`
       *
       * @param {?} url current page path
       * @return {?}
       */
      Angulartics2.prototype.clearUrl = function (url) {
          var _this = this;
          if (this.settings.pageTracking.clearIds || this.settings.pageTracking.clearQueryParams ||
              this.settings.pageTracking.clearHash) {
              return url
                  .split('/')
                  .map(function (part) { return _this.settings.pageTracking.clearQueryParams ? part.split('?')[0] : part; })
                  .map(function (part) { return _this.settings.pageTracking.clearHash ? part.split('#')[0] : part; })
                  .filter(function (part) { return !_this.settings.pageTracking.clearIds || !part.match(_this.settings.pageTracking.idsRegExp); })
                  .join('/');
          }
          return url;
      };
      return Angulartics2;
  }());
  Angulartics2.decorators = [
      { type: core.Injectable },
  ];
  /** @nocollapse */
  Angulartics2.ctorParameters = function () {
      return [
          { type: RouterlessTracking, },
          { type: undefined, decorators: [{ type: core.Inject, args: [ANGULARTICS2_TOKEN,] },] },
      ];
  };
  /**
   * @fileoverview added by tsickle
   * @suppress {checkTypes} checked by tsc
   */
  /**
   * Track Route changes for applications using Angular's
   * default router
   *
   * @link https://angular.io/api/router/Router
   */
  var AngularRouterTracking = (function () {
      /**
       * @param {?} router
       * @param {?} location
       */
      function AngularRouterTracking(router$$1, location) {
          this.router = router$$1;
          this.location = location;
      }
      /**
       * @param {?} settings
       * @return {?}
       */
      AngularRouterTracking.prototype.trackLocation = function (settings) {
          return this.router.events.pipe(filter.filter(function (e) { return e instanceof router.NavigationEnd; }), filter.filter(function () { return !settings.developerMode; }), map.map(function (e) {
              return { url: e.urlAfterRedirects };
          }), delay.delay(0));
      };
      /**
       * @param {?} url
       * @return {?}
       */
      AngularRouterTracking.prototype.prepareExternalUrl = function (url) {
          return this.location.prepareExternalUrl(url);
      };
      return AngularRouterTracking;
  }());
  AngularRouterTracking.decorators = [
      { type: core.Injectable },
  ];
  /** @nocollapse */
  AngularRouterTracking.ctorParameters = function () {
      return [
          { type: router.Router, },
          { type: common.Location, },
      ];
  };
  /**
   * @fileoverview added by tsickle
   * @suppress {checkTypes} checked by tsc
   */
  var Angulartics2On = (function () {
      /**
       * @param {?} elRef
       * @param {?} angulartics2
       * @param {?} renderer
       */
      function Angulartics2On(elRef, angulartics2, renderer) {
          this.elRef = elRef;
          this.angulartics2 = angulartics2;
          this.renderer = renderer;
          this.angularticsProperties = {};
      }
      /**
       * @return {?}
       */
      Angulartics2On.prototype.ngAfterContentInit = function () {
          var _this = this;
          this.renderer.listen(this.elRef.nativeElement, this.angulartics2On || 'click', function (event) { return _this.eventTrack(event); });
      };
      /**
       * @param {?} event
       * @return {?}
       */
      Angulartics2On.prototype.eventTrack = function (event) {
          var /** @type {?} */ action = this.angularticsAction; // || this.inferEventName();
          var /** @type {?} */ properties = Object.assign({}, this.angularticsProperties, { eventType: event.type });
          if (this.angularticsCategory) {
              properties.category = this.angularticsCategory;
          }
          if (this.angularticsLabel) {
              properties.label = this.angularticsLabel;
          }
          if (this.angularticsValue) {
              properties.value = this.angularticsValue;
          }
          this.angulartics2.eventTrack.next({
              action: action,
              properties: properties,
          });
      };
      return Angulartics2On;
  }());
  Angulartics2On.decorators = [
      { type: core.Injectable },
      { type: core.Directive, args: [{ selector: '[angulartics2On]' },] },
  ];
  /*private isCommand() {
      return ['a:', 'button:', 'button:button', 'button:submit', 'input:button', 'input:submit'].indexOf(
        getDOM().tagName(this.el).toLowerCase() + ':' + (getDOM().type(this.el) || '')) >= 0;
    }

    private inferEventName() {
      if (this.isCommand()) return getDOM().getText(this.el) || getDOM().getValue(this.el);
      return getDOM().getProperty(this.el, 'id') || getDOM().getProperty(this.el, 'name') || getDOM().tagName(this.el);
    }*/
  /** @nocollapse */
  Angulartics2On.ctorParameters = function () {
      return [
          { type: core.ElementRef, },
          { type: Angulartics2, },
          { type: core.Renderer2, },
      ];
  };
  Angulartics2On.propDecorators = {
      "angulartics2On": [{ type: core.Input, args: ['angulartics2On',] },],
      "angularticsAction": [{ type: core.Input },],
      "angularticsCategory": [{ type: core.Input },],
      "angularticsLabel": [{ type: core.Input },],
      "angularticsValue": [{ type: core.Input },],
      "angularticsProperties": [{ type: core.Input },],
  };
  var Angulartics2OnModule = (function () {
      function Angulartics2OnModule() {
      }
      return Angulartics2OnModule;
  }());
  Angulartics2OnModule.decorators = [
      { type: core.NgModule, args: [{
                  declarations: [Angulartics2On],
                  exports: [Angulartics2On],
              },] },
  ];
  var Angulartics2Module = (function () {
      function Angulartics2Module() {
      }
      /**
       * @param {?} providers
       * @param {?=} settings
       * @return {?}
       */
      Angulartics2Module.forRoot = function (providers, settings) {
          if (settings === void 0) {
              settings = {};
          }
          return {
              ngModule: Angulartics2Module,
              providers: tslib.__spread([
                  { provide: ANGULARTICS2_TOKEN, useValue: { providers: providers, settings: settings } },
                  Angulartics2,
                  { provide: RouterlessTracking, useClass: AngularRouterTracking }
              ], providers),
          };
      };
      return Angulartics2Module;
  }());
  Angulartics2Module.decorators = [
      { type: core.NgModule, args: [{
                  imports: [Angulartics2OnModule],
                  exports: [Angulartics2On],
              },] },
  ];

  exports.Angulartics2 = Angulartics2;
  exports.Angulartics2Module = Angulartics2Module;
  exports.ANGULARTICS2_TOKEN = ANGULARTICS2_TOKEN;
  exports.Angulartics2On = Angulartics2On;
  exports.Angulartics2OnModule = Angulartics2OnModule;
  exports.RouterlessTracking = RouterlessTracking;
  exports.AngularRouterTracking = AngularRouterTracking;
  exports.DefaultConfig = DefaultConfig;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=angulartics2.umd.js.map
