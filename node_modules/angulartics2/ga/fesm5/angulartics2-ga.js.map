{
  "version": 3,
  "file": "angulartics2-ga.js",
  "sources": [
    "ng://angulartics2/ga/src/lib/providers/ga/ga.ts"
  ],
  "sourcesContent": [
    "import { Injectable } from '@angular/core';\n\nimport {\n  Angulartics2,\n  GoogleAnalyticsSettings,\n  UserTimings,\n} from 'angulartics2';\n\n\ndeclare var _gaq: GoogleAnalyticsCode;\ndeclare var ga: UniversalAnalytics.ga;\ndeclare var location: any;\n\nexport class GoogleAnalyticsDefaults implements GoogleAnalyticsSettings {\n  additionalAccountNames = [];\n  userId = null;\n  transport = '';\n  anonymizeIp = false;\n}\n\n@Injectable()\nexport class Angulartics2GoogleAnalytics {\n  dimensionsAndMetrics = [];\n\n  constructor(private angulartics2: Angulartics2) {\n    const defaults = new GoogleAnalyticsDefaults();\n    // Set the default settings for this module\n    this.angulartics2.settings.ga = {\n      ...defaults,\n      ...this.angulartics2.settings.ga,\n    };\n    this.angulartics2.pageTrack\n      .pipe(this.angulartics2.filterDeveloperMode())\n      .subscribe(x => this.pageTrack(x.path));\n    this.angulartics2.eventTrack\n      .pipe(this.angulartics2.filterDeveloperMode())\n      .subscribe(x => this.eventTrack(x.action, x.properties));\n    this.angulartics2.exceptionTrack\n      .pipe(this.angulartics2.filterDeveloperMode())\n      .subscribe(x => this.exceptionTrack(x));\n    this.angulartics2.setUsername.subscribe((x: string) => this.setUsername(x));\n    this.angulartics2.setUserProperties.subscribe(x => this.setUserProperties(x));\n    this.angulartics2.userTimings\n      .pipe(this.angulartics2.filterDeveloperMode())\n      .subscribe(x => this.userTimings(x));\n  }\n\n  pageTrack(path: string) {\n    if (typeof _gaq !== 'undefined' && _gaq) {\n      _gaq.push(['_trackPageview', path]);\n      for (const accountName of this.angulartics2.settings.ga.additionalAccountNames) {\n        _gaq.push([accountName + '._trackPageview', path]);\n      }\n    }\n    if (typeof ga !== 'undefined' && ga) {\n      if (this.angulartics2.settings.ga.userId) {\n        ga('set', '&uid', this.angulartics2.settings.ga.userId);\n        for (const accountName of this.angulartics2.settings.ga.additionalAccountNames) {\n          ga(accountName + '.set', '&uid', this.angulartics2.settings.ga.userId);\n        }\n      }\n      if (this.angulartics2.settings.ga.anonymizeIp) {\n        ga('set', 'anonymizeIp', true);\n        for (const accountName of this.angulartics2.settings.ga.additionalAccountNames) {\n          ga(accountName + '.set', 'anonymizeIp', true);\n        }\n      }\n      ga('send', 'pageview', path);\n      for (const accountName of this.angulartics2.settings.ga.additionalAccountNames) {\n        ga(accountName + '.send', 'pageview', path);\n      }\n    }\n  }\n\n  /**\n   * Track Event in GA\n   *\n   * @param action Associated with the event\n   * @param properties Comprised of:\n   *  - category (string) and optional\n   *  - label (string)\n   *  - value (integer)\n   *  - noninteraction (boolean)\n   *\n   * @link https://developers.google.com/analytics/devguides/collection/gajs/eventTrackerGuide#SettingUpEventTracking\n   * @link https://developers.google.com/analytics/devguides/collection/analyticsjs/events\n   */\n  eventTrack(action: string, properties: any) {\n    // Google Analytics requires an Event Category\n    if (!properties || !properties.category) {\n      properties = properties || {};\n      properties.category = 'Event';\n    }\n    // GA requires that eventValue be an integer, see:\n    // https://developers.google.com/analytics/devguides/collection/analyticsjs/field-reference#eventValue\n    // https://github.com/luisfarzati/angulartics/issues/81\n    if (properties.value) {\n      const parsed = parseInt(properties.value, 10);\n      properties.value = isNaN(parsed) ? 0 : parsed;\n    }\n\n    if (typeof ga !== 'undefined') {\n      const eventOptions = {\n        eventCategory: properties.category,\n        eventAction: action,\n        eventLabel: properties.label,\n        eventValue: properties.value,\n        nonInteraction: properties.noninteraction,\n        page: properties.page || location.hash.substring(1) || location.pathname,\n        userId: this.angulartics2.settings.ga.userId,\n        hitCallback: properties.hitCallback,\n      };\n\n      // add custom dimensions and metrics\n      this.setDimensionsAndMetrics(properties);\n      if (this.angulartics2.settings.ga.transport) {\n        ga('send', 'event', eventOptions, {\n          transport: this.angulartics2.settings.ga.transport,\n        });\n      } else {\n        ga('send', 'event', eventOptions);\n      }\n\n      for (const accountName of this.angulartics2.settings.ga.additionalAccountNames) {\n        ga(accountName + '.send', 'event', eventOptions);\n      }\n    } else if (typeof _gaq !== 'undefined') {\n      _gaq.push([\n        '_trackEvent',\n        properties.category,\n        action,\n        properties.label,\n        properties.value,\n        properties.noninteraction,\n      ]);\n    }\n  }\n\n  /**\n   * Exception Track Event in GA\n   *\n   * @param properties Comprised of the optional fields:\n   *  - fatal (string)\n   *  - description (string)\n   *\n   * @https://developers.google.com/analytics/devguides/collection/analyticsjs/exceptions\n   *\n   * @link https://developers.google.com/analytics/devguides/collection/analyticsjs/events\n   */\n  exceptionTrack(properties: any) {\n    if (properties.fatal === undefined) {\n      console.log('No \"fatal\" provided, sending with fatal=true');\n      properties.fatal = true;\n    }\n\n    properties.exDescription = properties.description;\n\n    const eventOptions = {\n      exFatal: properties.fatal,\n      exDescription: properties.description,\n    };\n\n    ga('send', 'exception', eventOptions);\n    for (const accountName of this.angulartics2.settings.ga.additionalAccountNames) {\n      ga(accountName + '.send', 'exception', eventOptions);\n    }\n  }\n\n  /**\n   * User Timings Event in GA\n   * @name userTimings\n   *\n   * @param properties Comprised of the mandatory fields:\n   *  - timingCategory (string)\n   *  - timingVar (string)\n   *  - timingValue (number)\n   * Properties can also have the optional fields:\n   *  - timingLabel (string)\n   *\n   * @link https://developers.google.com/analytics/devguides/collection/analyticsjs/user-timings\n   */\n  userTimings(properties: UserTimings) {\n    if (\n      !properties ||\n      !properties.timingCategory ||\n      !properties.timingVar ||\n      !properties.timingValue\n    ) {\n      console.error(\n        'Properties timingCategory, timingVar, and timingValue are required to be set.',\n      );\n      return;\n    }\n\n    if (typeof ga !== 'undefined') {\n      ga('send', 'timing', properties);\n      for (const accountName of this.angulartics2.settings.ga.additionalAccountNames) {\n        ga(accountName + '.send', 'timing', properties);\n      }\n    }\n  }\n\n  setUsername(userId: string) {\n    this.angulartics2.settings.ga.userId = userId;\n    if (typeof ga === 'undefined') {\n      return;\n    }\n    ga('set', 'userId', userId);\n  }\n\n  setUserProperties(properties: any) {\n    this.setDimensionsAndMetrics(properties);\n  }\n\n  private setDimensionsAndMetrics(properties: any) {\n    if (typeof ga === 'undefined') {\n      return;\n    }\n    // clean previously used dimensions and metrics that will not be overriden\n    this.dimensionsAndMetrics.forEach(elem => {\n      if (!properties.hasOwnProperty(elem)) {\n        ga('set', elem, undefined);\n\n        this.angulartics2.settings.ga.additionalAccountNames.forEach(\n          (accountName: string) => {\n            ga(`${accountName}.set`, elem, undefined);\n          },\n        );\n      }\n    });\n    this.dimensionsAndMetrics = [];\n\n    // add custom dimensions and metrics\n    Object.keys(properties).forEach(key => {\n      if (\n        key.lastIndexOf('dimension', 0) === 0 ||\n        key.lastIndexOf('metric', 0) === 0\n      ) {\n        ga('set', key, properties[key]);\n\n        this.angulartics2.settings.ga.additionalAccountNames.forEach(\n          (accountName: string) => {\n            ga(`${accountName}.set`, key, properties[key]);\n          },\n        );\n        this.dimensionsAndMetrics.push(key);\n      }\n    });\n  }\n}\n"
  ],
  "names": [
    "tslib_1.__values"
  ],
  "mappings": "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"
}
