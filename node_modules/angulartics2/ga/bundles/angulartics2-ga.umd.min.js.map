{
  "version": 3,
  "file": "angulartics2-ga.umd.min.js",
  "sources": [
    "ng://angulartics2/ga/src/lib/providers/ga/ga.ts"
  ],
  "sourcesContent": [
    "import { Injectable } from '@angular/core';\n\nimport {\n  Angulartics2,\n  GoogleAnalyticsSettings,\n  UserTimings,\n} from 'angulartics2';\n\n\ndeclare var _gaq: GoogleAnalyticsCode;\ndeclare var ga: UniversalAnalytics.ga;\ndeclare var location: any;\n\nexport class GoogleAnalyticsDefaults implements GoogleAnalyticsSettings {\n  additionalAccountNames = [];\n  userId = null;\n  transport = '';\n  anonymizeIp = false;\n}\n\n@Injectable()\nexport class Angulartics2GoogleAnalytics {\n  dimensionsAndMetrics = [];\n\n  constructor(private angulartics2: Angulartics2) {\n    const defaults = new GoogleAnalyticsDefaults();\n    // Set the default settings for this module\n    this.angulartics2.settings.ga = {\n      ...defaults,\n      ...this.angulartics2.settings.ga,\n    };\n    this.angulartics2.pageTrack\n      .pipe(this.angulartics2.filterDeveloperMode())\n      .subscribe(x => this.pageTrack(x.path));\n    this.angulartics2.eventTrack\n      .pipe(this.angulartics2.filterDeveloperMode())\n      .subscribe(x => this.eventTrack(x.action, x.properties));\n    this.angulartics2.exceptionTrack\n      .pipe(this.angulartics2.filterDeveloperMode())\n      .subscribe(x => this.exceptionTrack(x));\n    this.angulartics2.setUsername.subscribe((x: string) => this.setUsername(x));\n    this.angulartics2.setUserProperties.subscribe(x => this.setUserProperties(x));\n    this.angulartics2.userTimings\n      .pipe(this.angulartics2.filterDeveloperMode())\n      .subscribe(x => this.userTimings(x));\n  }\n\n  pageTrack(path: string) {\n    if (typeof _gaq !== 'undefined' && _gaq) {\n      _gaq.push(['_trackPageview', path]);\n      for (const accountName of this.angulartics2.settings.ga.additionalAccountNames) {\n        _gaq.push([accountName + '._trackPageview', path]);\n      }\n    }\n    if (typeof ga !== 'undefined' && ga) {\n      if (this.angulartics2.settings.ga.userId) {\n        ga('set', '&uid', this.angulartics2.settings.ga.userId);\n        for (const accountName of this.angulartics2.settings.ga.additionalAccountNames) {\n          ga(accountName + '.set', '&uid', this.angulartics2.settings.ga.userId);\n        }\n      }\n      if (this.angulartics2.settings.ga.anonymizeIp) {\n        ga('set', 'anonymizeIp', true);\n        for (const accountName of this.angulartics2.settings.ga.additionalAccountNames) {\n          ga(accountName + '.set', 'anonymizeIp', true);\n        }\n      }\n      ga('send', 'pageview', path);\n      for (const accountName of this.angulartics2.settings.ga.additionalAccountNames) {\n        ga(accountName + '.send', 'pageview', path);\n      }\n    }\n  }\n\n  /**\n   * Track Event in GA\n   *\n   * @param action Associated with the event\n   * @param properties Comprised of:\n   *  - category (string) and optional\n   *  - label (string)\n   *  - value (integer)\n   *  - noninteraction (boolean)\n   *\n   * @link https://developers.google.com/analytics/devguides/collection/gajs/eventTrackerGuide#SettingUpEventTracking\n   * @link https://developers.google.com/analytics/devguides/collection/analyticsjs/events\n   */\n  eventTrack(action: string, properties: any) {\n    // Google Analytics requires an Event Category\n    if (!properties || !properties.category) {\n      properties = properties || {};\n      properties.category = 'Event';\n    }\n    // GA requires that eventValue be an integer, see:\n    // https://developers.google.com/analytics/devguides/collection/analyticsjs/field-reference#eventValue\n    // https://github.com/luisfarzati/angulartics/issues/81\n    if (properties.value) {\n      const parsed = parseInt(properties.value, 10);\n      properties.value = isNaN(parsed) ? 0 : parsed;\n    }\n\n    if (typeof ga !== 'undefined') {\n      const eventOptions = {\n        eventCategory: properties.category,\n        eventAction: action,\n        eventLabel: properties.label,\n        eventValue: properties.value,\n        nonInteraction: properties.noninteraction,\n        page: properties.page || location.hash.substring(1) || location.pathname,\n        userId: this.angulartics2.settings.ga.userId,\n        hitCallback: properties.hitCallback,\n      };\n\n      // add custom dimensions and metrics\n      this.setDimensionsAndMetrics(properties);\n      if (this.angulartics2.settings.ga.transport) {\n        ga('send', 'event', eventOptions, {\n          transport: this.angulartics2.settings.ga.transport,\n        });\n      } else {\n        ga('send', 'event', eventOptions);\n      }\n\n      for (const accountName of this.angulartics2.settings.ga.additionalAccountNames) {\n        ga(accountName + '.send', 'event', eventOptions);\n      }\n    } else if (typeof _gaq !== 'undefined') {\n      _gaq.push([\n        '_trackEvent',\n        properties.category,\n        action,\n        properties.label,\n        properties.value,\n        properties.noninteraction,\n      ]);\n    }\n  }\n\n  /**\n   * Exception Track Event in GA\n   *\n   * @param properties Comprised of the optional fields:\n   *  - fatal (string)\n   *  - description (string)\n   *\n   * @https://developers.google.com/analytics/devguides/collection/analyticsjs/exceptions\n   *\n   * @link https://developers.google.com/analytics/devguides/collection/analyticsjs/events\n   */\n  exceptionTrack(properties: any) {\n    if (properties.fatal === undefined) {\n      console.log('No \"fatal\" provided, sending with fatal=true');\n      properties.fatal = true;\n    }\n\n    properties.exDescription = properties.description;\n\n    const eventOptions = {\n      exFatal: properties.fatal,\n      exDescription: properties.description,\n    };\n\n    ga('send', 'exception', eventOptions);\n    for (const accountName of this.angulartics2.settings.ga.additionalAccountNames) {\n      ga(accountName + '.send', 'exception', eventOptions);\n    }\n  }\n\n  /**\n   * User Timings Event in GA\n   * @name userTimings\n   *\n   * @param properties Comprised of the mandatory fields:\n   *  - timingCategory (string)\n   *  - timingVar (string)\n   *  - timingValue (number)\n   * Properties can also have the optional fields:\n   *  - timingLabel (string)\n   *\n   * @link https://developers.google.com/analytics/devguides/collection/analyticsjs/user-timings\n   */\n  userTimings(properties: UserTimings) {\n    if (\n      !properties ||\n      !properties.timingCategory ||\n      !properties.timingVar ||\n      !properties.timingValue\n    ) {\n      console.error(\n        'Properties timingCategory, timingVar, and timingValue are required to be set.',\n      );\n      return;\n    }\n\n    if (typeof ga !== 'undefined') {\n      ga('send', 'timing', properties);\n      for (const accountName of this.angulartics2.settings.ga.additionalAccountNames) {\n        ga(accountName + '.send', 'timing', properties);\n      }\n    }\n  }\n\n  setUsername(userId: string) {\n    this.angulartics2.settings.ga.userId = userId;\n    if (typeof ga === 'undefined') {\n      return;\n    }\n    ga('set', 'userId', userId);\n  }\n\n  setUserProperties(properties: any) {\n    this.setDimensionsAndMetrics(properties);\n  }\n\n  private setDimensionsAndMetrics(properties: any) {\n    if (typeof ga === 'undefined') {\n      return;\n    }\n    // clean previously used dimensions and metrics that will not be overriden\n    this.dimensionsAndMetrics.forEach(elem => {\n      if (!properties.hasOwnProperty(elem)) {\n        ga('set', elem, undefined);\n\n        this.angulartics2.settings.ga.additionalAccountNames.forEach(\n          (accountName: string) => {\n            ga(`${accountName}.set`, elem, undefined);\n          },\n        );\n      }\n    });\n    this.dimensionsAndMetrics = [];\n\n    // add custom dimensions and metrics\n    Object.keys(properties).forEach(key => {\n      if (\n        key.lastIndexOf('dimension', 0) === 0 ||\n        key.lastIndexOf('metric', 0) === 0\n      ) {\n        ga('set', key, properties[key]);\n\n        this.angulartics2.settings.ga.additionalAccountNames.forEach(\n          (accountName: string) => {\n            ga(`${accountName}.set`, key, properties[key]);\n          },\n        );\n        this.dimensionsAndMetrics.push(key);\n      }\n    });\n  }\n}\n"
  ],
  "names": [
    "this",
    "additionalAccountNames",
    "userId",
    "transport",
    "Angulartics2GoogleAnalytics",
    "angulartics2",
    "dimensionsAndMetrics",
    "defaults",
    "GoogleAnalyticsDefaults",
    "settings",
    "ga",
    "Object",
    "assign",
    "pageTrack",
    "pipe",
    "filterDeveloperMode",
    "subscribe",
    "x",
    "_this",
    "path",
    "eventTrack",
    "action",
    "properties",
    "exceptionTrack",
    "setUsername",
    "setUserProperties",
    "prototype",
    "_gaq",
    "push",
    "_a",
    "tslib_1.__values",
    "_b",
    "next",
    "done",
    "accountName",
    "value",
    "e_1_1",
    "e_1",
    "error",
    "_c",
    "return",
    "call",
    "_d",
    "_e",
    "_h",
    "_j",
    "_g",
    "e_3",
    "_k",
    "_l",
    "e_4_1",
    "e_4",
    "e_2",
    "_f",
    "_m",
    "category",
    "eventAction",
    "eventLabel",
    "label",
    "eventValue",
    "nonInteraction",
    "noninteraction",
    "page",
    "location",
    "hash",
    "substring",
    "pathname",
    "hitCallback",
    "setDimensionsAndMetrics",
    "eventOptions",
    "e_5",
    "fatal",
    "exDescription",
    "description",
    "e_6_1",
    "e_6",
    "timingCategory"
  ],
  "mappings": "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"
}
