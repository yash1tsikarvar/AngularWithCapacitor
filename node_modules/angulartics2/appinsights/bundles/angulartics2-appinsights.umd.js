(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/platform-browser'), require('@angular/router'), require('rxjs/operators/filter'), require('angulartics2')) :
    typeof define === 'function' && define.amd ? define('angulartics2/appinsights', ['exports', '@angular/core', '@angular/platform-browser', '@angular/router', 'rxjs/operators/filter', 'angulartics2'], factory) :
    (factory((global.angulartics2 = global.angulartics2 || {}, global.angulartics2.appinsights = {}),global.ng.core,global.ng.platformBrowser,global.ng.router,global.Rx.Observable.prototype,global.angulartics2));
}(this, (function (exports,core,platformBrowser,router,filter,angulartics2) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AppInsightsDefaults = (function () {
        function AppInsightsDefaults() {
            this.userId = null;
        }
        return AppInsightsDefaults;
    }());
    var Angulartics2AppInsights = (function () {
        /**
         * @param {?} angulartics2
         * @param {?} title
         * @param {?} router
         */
        function Angulartics2AppInsights(angulartics2$$1, title, router$$1) {
            var _this = this;
            this.angulartics2 = angulartics2$$1;
            this.title = title;
            this.router = router$$1;
            this.loadStartTime = null;
            this.loadTime = null;
            this.metrics = null;
            this.dimensions = null;
            this.measurements = null;
            if (typeof appInsights === 'undefined') {
                console.warn('appInsights not found');
            }
            var /** @type {?} */ defaults = new AppInsightsDefaults;
            // Set the default settings for this module
            this.angulartics2.settings.appInsights = Object.assign({}, defaults, this.angulartics2.settings.appInsights);
            this.angulartics2.pageTrack
                .pipe(this.angulartics2.filterDeveloperMode())
                .subscribe(function (x) { return _this.pageTrack(x.path); });
            this.angulartics2.eventTrack
                .pipe(this.angulartics2.filterDeveloperMode())
                .subscribe(function (x) { return _this.eventTrack(x.action, x.properties); });
            this.angulartics2.exceptionTrack
                .pipe(this.angulartics2.filterDeveloperMode())
                .subscribe(function (x) { return _this.exceptionTrack(x); });
            this.angulartics2.setUsername
                .subscribe(function (x) { return _this.setUsername(x); });
            this.angulartics2.setUserProperties
                .subscribe(function (x) { return _this.setUserProperties(x); });
            this.router.events
                .pipe(this.angulartics2.filterDeveloperMode(), filter.filter(function (event) { return event instanceof router.NavigationStart; }))
                .subscribe(function (event) { return _this.startTimer(); });
            this.router.events
                .pipe(filter.filter(function (event) { return event instanceof router.NavigationError || event instanceof router.NavigationEnd; }))
                .subscribe(function (error) { return _this.stopTimer(); });
        }
        /**
         * @return {?}
         */
        Angulartics2AppInsights.prototype.startTimer = function () {
            this.loadStartTime = Date.now();
            this.loadTime = null;
        };
        /**
         * @return {?}
         */
        Angulartics2AppInsights.prototype.stopTimer = function () {
            this.loadTime = Date.now() - this.loadStartTime;
            this.loadStartTime = null;
        };
        /**
         * Page Track in Baidu Analytics
         *
         * @link https://github.com/Microsoft/ApplicationInsights-JS/blob/master/API-reference.md#trackpageview
         * @param {?} path - Location 'path'
         *
         * @return {?}
         */
        Angulartics2AppInsights.prototype.pageTrack = function (path) {
            appInsights.trackPageView(this.title.getTitle(), path, this.dimensions, this.metrics, this.loadTime);
        };
        /**
         * Log a user action or other occurrence.
         *
         * @link https://github.com/Microsoft/ApplicationInsights-JS/blob/master/API-reference.md#trackevent
         * @param {?} name Name to identify this event in the portal.
         * @param {?} properties Additional data used to filter events and metrics in the portal. Defaults to empty.
         *
         * @return {?}
         */
        Angulartics2AppInsights.prototype.eventTrack = function (name, properties) {
            appInsights.trackEvent(name, properties, this.measurements);
        };
        /**
         * Exception Track Event in GA
         *
         * @link https://github.com/Microsoft/ApplicationInsights-JS/blob/master/API-reference.md#trackexception
         * @param {?} properties - Comprised of the mandatory fields 'appId' (string), 'appName' (string) and 'appVersion' (string) and
         * optional fields 'fatal' (boolean) and 'description' (string), error
         *
         * @return {?}
         */
        Angulartics2AppInsights.prototype.exceptionTrack = function (properties) {
            var /** @type {?} */ description = properties.event || properties.description || properties;
            appInsights.trackException(description);
        };
        /**
         *
         * @link https://github.com/Microsoft/ApplicationInsights-JS/blob/master/API-reference.md#setauthenticatedusercontext
         * @param {?} userId
         *
         * @return {?}
         */
        Angulartics2AppInsights.prototype.setUsername = function (userId) {
            this.angulartics2.settings.appInsights.userId = userId;
            appInsights.setAuthenticatedUserContext(userId);
        };
        /**
         * @param {?} properties
         * @return {?}
         */
        Angulartics2AppInsights.prototype.setUserProperties = function (properties) {
            if (properties.userId) {
                this.angulartics2.settings.appInsights.userId = properties.userId;
            }
            if (properties.accountId) {
                appInsights.setAuthenticatedUserContext(this.angulartics2.settings.appInsights.userId, properties.accountId);
            }
            else {
                appInsights.setAuthenticatedUserContext(this.angulartics2.settings.appInsights.userId);
            }
        };
        return Angulartics2AppInsights;
    }());
    Angulartics2AppInsights.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    Angulartics2AppInsights.ctorParameters = function () {
        return [
            { type: angulartics2.Angulartics2, },
            { type: platformBrowser.Title, },
            { type: router.Router, },
        ];
    };

    exports.AppInsightsDefaults = AppInsightsDefaults;
    exports.Angulartics2AppInsights = Angulartics2AppInsights;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=angulartics2-appinsights.umd.js.map
