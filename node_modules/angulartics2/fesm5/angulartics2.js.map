{
  "version": 3,
  "file": "angulartics2.js",
  "sources": [
    "ng://angulartics2/src/lib/core/angulartics2.module.ts",
    "ng://angulartics2/src/lib/core/angulartics2On.ts",
    "ng://angulartics2/src/lib/core/angular-router.ts",
    "ng://angulartics2/src/lib/core/angulartics2-core.ts",
    "ng://angulartics2/src/lib/core/routerless.ts",
    "ng://angulartics2/src/lib/core/angulartics2-token.ts",
    "ng://angulartics2/src/lib/core/angulartics2-config.ts"
  ],
  "sourcesContent": [
    "import {\n  ModuleWithProviders,\n  NgModule,\n  Provider,\n} from '@angular/core';\n\nimport { AngularRouterTracking } from './angular-router';\nimport { Angulartics2Settings } from './angulartics2-config';\nimport { Angulartics2 } from './angulartics2-core';\nimport { ANGULARTICS2_TOKEN } from './angulartics2-token';\nimport { Angulartics2On, Angulartics2OnModule } from './angulartics2On';\nimport { RouterlessTracking } from './routerless';\n\n\n@NgModule({\n  imports: [Angulartics2OnModule],\n  exports: [Angulartics2On],\n})\nexport class Angulartics2Module {\n  static forRoot(\n    providers: Provider[],\n    settings: Partial<Angulartics2Settings> = {},\n  ): ModuleWithProviders {\n    return {\n      ngModule: Angulartics2Module,\n      providers: [\n        { provide: ANGULARTICS2_TOKEN, useValue: { providers, settings } },\n        Angulartics2,\n        { provide: RouterlessTracking, useClass: AngularRouterTracking },\n        ...providers,\n      ],\n    };\n  }\n}\n",
    "import {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  Injectable,\n  Input,\n  NgModule,\n  Renderer2,\n} from '@angular/core';\nimport { Angulartics2 } from './angulartics2-core';\n\n@Injectable()\n@Directive({ selector: '[angulartics2On]' })\nexport class Angulartics2On implements AfterContentInit {\n  @Input('angulartics2On') angulartics2On: string;\n  @Input() angularticsAction: string;\n  @Input() angularticsCategory: string;\n  @Input() angularticsLabel: string;\n  @Input() angularticsValue: string;\n  @Input() angularticsProperties: any = {};\n\n  constructor(\n    private elRef: ElementRef,\n    private angulartics2: Angulartics2,\n    private renderer: Renderer2\n  ) { }\n\n  ngAfterContentInit() {\n    this.renderer.listen(\n      this.elRef.nativeElement,\n      this.angulartics2On || 'click',\n      (event: Event) => this.eventTrack(event),\n    );\n  }\n\n  eventTrack(event: Event) {\n    const action = this.angularticsAction; // || this.inferEventName();\n    const properties: any = {\n      ...this.angularticsProperties,\n      eventType: event.type,\n    };\n\n    if (this.angularticsCategory) {\n      properties.category = this.angularticsCategory;\n    }\n    if (this.angularticsLabel) {\n      properties.label = this.angularticsLabel;\n    }\n    if (this.angularticsValue) {\n      properties.value = this.angularticsValue;\n    }\n\n    this.angulartics2.eventTrack.next({\n      action,\n      properties,\n    });\n  }\n\n  /*private isCommand() {\n    return ['a:', 'button:', 'button:button', 'button:submit', 'input:button', 'input:submit'].indexOf(\n      getDOM().tagName(this.el).toLowerCase() + ':' + (getDOM().type(this.el) || '')) >= 0;\n  }\n\n  private inferEventName() {\n    if (this.isCommand()) return getDOM().getText(this.el) || getDOM().getValue(this.el);\n    return getDOM().getProperty(this.el, 'id') || getDOM().getProperty(this.el, 'name') || getDOM().tagName(this.el);\n  }*/\n}\n\n@NgModule({\n  declarations: [Angulartics2On],\n  exports: [Angulartics2On],\n})\nexport class Angulartics2OnModule {}\n",
    "import { Location } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\n\nimport { delay } from 'rxjs/operators/delay';\nimport { filter } from 'rxjs/operators/filter';\nimport { map } from 'rxjs/operators/map';\n\nimport { Observable } from 'rxjs/Observable';\nimport { RouterlessTracking, TrackNavigationEnd } from './routerless';\n\n/**\n * Track Route changes for applications using Angular's\n * default router\n *\n * @link https://angular.io/api/router/Router\n */\n@Injectable()\nexport class AngularRouterTracking implements RouterlessTracking {\n  constructor(\n    private router: Router,\n    private location: Location,\n  ) {}\n\n  trackLocation(settings): Observable<TrackNavigationEnd> {\n    return this.router.events.pipe(\n      filter(e => e instanceof NavigationEnd),\n      filter(() => !settings.developerMode),\n      map((e: NavigationEnd) => {\n        return { url: e.urlAfterRedirects };\n      }),\n      delay(0),\n    );\n  }\n\n  prepareExternalUrl(url: string): string {\n    return this.location.prepareExternalUrl(url);\n  }\n}\n",
    "import { Inject, Injectable } from '@angular/core';\n\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\nimport { MonoTypeOperatorFunction } from 'rxjs/interfaces';\nimport { filter } from 'rxjs/operators/filter';\n\nimport { Angulartics2Settings, DefaultConfig } from './angulartics2-config';\nimport { EventTrack, PageTrack, UserTimings } from './angulartics2-interfaces';\nimport { Angulartics2Token, ANGULARTICS2_TOKEN } from './angulartics2-token';\nimport { RouterlessTracking, TrackNavigationEnd } from './routerless';\n\n@Injectable()\nexport class Angulartics2 {\n  settings: Angulartics2Settings;\n\n  pageTrack = new ReplaySubject<Partial<PageTrack>>(10);\n  eventTrack = new ReplaySubject<Partial<EventTrack>>(10);\n  exceptionTrack = new ReplaySubject<any>(10);\n  setAlias = new ReplaySubject<string>(10);\n  setUsername = new ReplaySubject<{ userId: string | number } | string>(10);\n  setUserProperties = new ReplaySubject<any>(10);\n  setUserPropertiesOnce = new ReplaySubject<any>(10);\n  setSuperProperties = new ReplaySubject<any>(10);\n  setSuperPropertiesOnce = new ReplaySubject<any>(10);\n  userTimings = new ReplaySubject<UserTimings>(10);\n\n  constructor(\n    private tracker: RouterlessTracking,\n    @Inject(ANGULARTICS2_TOKEN) setup: Angulartics2Token,\n  ) {\n    const defaultConfig = new DefaultConfig();\n    this.settings = { ...defaultConfig, ...setup.settings };\n    this.settings.pageTracking = {\n      ...defaultConfig.pageTracking,\n      ...setup.settings.pageTracking,\n    };\n    this.tracker\n      .trackLocation(this.settings)\n      .subscribe((event: TrackNavigationEnd) =>\n        this.trackUrlChange(event.url),\n      );\n  }\n\n  /** @deprecated */\n  virtualPageviews(value: boolean) {\n    this.settings.pageTracking.autoTrackVirtualPages = value;\n  }\n  /** @deprecated */\n  excludeRoutes(routes: Array<string | RegExp>) {\n    this.settings.pageTracking.excludedRoutes = routes;\n  }\n  /** @deprecated */\n  withBase(value: string) {\n    this.settings.pageTracking.basePath = value;\n  }\n  /** @deprecated */\n  clearIds(value: boolean) {\n    this.settings.pageTracking.clearIds = value;\n  }\n  /** @deprecated */\n  developerMode(value: boolean) {\n    this.settings.developerMode = value;\n  }\n\n  /** filters all events when developer mode is true */\n  filterDeveloperMode<T>(): MonoTypeOperatorFunction<T> {\n    return filter((value, index) => !this.settings.developerMode);\n  }\n\n  protected trackUrlChange(url: string) {\n    if (this.settings.pageTracking.autoTrackVirtualPages && !this.matchesExcludedRoute(url)) {\n      const clearedUrl = this.clearUrl(url);\n      let path: string;\n      if (this.settings.pageTracking.basePath.length) {\n        path = this.settings.pageTracking.basePath + clearedUrl;\n      } else {\n        path = this.tracker.prepareExternalUrl(clearedUrl);\n      }\n      this.pageTrack.next({ path });\n    }\n  }\n\n  /**\n   * Use string literals or regular expressions to exclude routes\n   * from automatic pageview tracking.\n   *\n   * @param url location\n   */\n  protected matchesExcludedRoute(url: string): boolean {\n    for (const excludedRoute of this.settings.pageTracking.excludedRoutes) {\n      const matchesRegex = excludedRoute instanceof RegExp && excludedRoute.test(url);\n      if (matchesRegex || url.indexOf(<string>excludedRoute) !== -1) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Removes id's from tracked route.\n   *  EX: `/project/12981/feature` becomes `/project/feature`\n   *\n   * @param url current page path\n   */\n  protected clearUrl(url: string): string {\n    if (this.settings.pageTracking.clearIds || this.settings.pageTracking.clearQueryParams ||\n      this.settings.pageTracking.clearHash) {\n      return url\n        .split('/')\n        .map(part => this.settings.pageTracking.clearQueryParams ? part.split('?')[0] : part)\n        .map(part => this.settings.pageTracking.clearHash ? part.split('#')[0] : part)\n        .filter(part => !this.settings.pageTracking.clearIds || !part.match(this.settings.pageTracking.idsRegExp))\n        .join('/');\n    }\n    return url;\n  }\n}\n",
    "import { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\n\nimport { Angulartics2Settings } from './angulartics2-config';\n\nexport interface TrackNavigationEnd {\n  url: string;\n}\n\nexport class RouterlessTracking {\n  trackLocation(settings: Angulartics2Settings): Observable<TrackNavigationEnd> {\n    return new BehaviorSubject<TrackNavigationEnd>({ url: '/' });\n  }\n  prepareExternalUrl(url: string): string {\n    return url;\n  }\n}\n",
    "import { InjectionToken, Provider } from '@angular/core';\n\nimport { Angulartics2Settings } from './angulartics2-config';\n\nexport interface Angulartics2Token {\n  providers: Provider[];\n  settings: Partial<Angulartics2Settings>;\n}\n\nexport const ANGULARTICS2_TOKEN = new InjectionToken<Angulartics2Token>('ANGULARTICS2');\n",
    "export interface GoogleAnalyticsSettings {\n  /** array of additional account names (only works for analyticsjs) */\n  additionalAccountNames: string[];\n  userId: any;\n  /** see https://developers.google.com/analytics/devguides/collection/analyticsjs/field-reference#transport */\n  transport: string;\n  anonymizeIp: boolean;\n}\n\nexport interface AppInsightsSettings {\n  userId: string;\n}\n\nexport interface GoogleTagManagerSettings {\n  userId: any;\n}\n\nexport interface PageTrackingSettings {\n  autoTrackVirtualPages: boolean;\n  basePath: string;\n  excludedRoutes: (string | RegExp)[];\n  /** drop ids from url `/sections/123/pages/456` -> `/sections/pages` */\n  clearIds: boolean;\n  /** drop contents of url after hash marker `/callback#authcode=1234` -> `/callback` */\n  clearHash: boolean;\n  /** drop query params from url `/sections/123/pages?param=456&param2=789` -> `/sections/123/pages` */\n  clearQueryParams: boolean;\n  /** used with clearIds, define the matcher to clear url parts */\n  idsRegExp: RegExp;\n}\n\nexport interface Angulartics2Settings {\n  pageTracking: Partial<PageTrackingSettings>;\n  /** Disable page tracking */\n  developerMode: boolean;\n  ga: Partial<GoogleAnalyticsSettings>;\n  appInsights: Partial<AppInsightsSettings>;\n  gtm: Partial<GoogleTagManagerSettings>;\n}\n\nexport class DefaultConfig implements Angulartics2Settings {\n  pageTracking = {\n    autoTrackVirtualPages: true,\n    basePath: '',\n    excludedRoutes: [],\n    clearIds: false,\n    clearHash: false,\n    clearQueryParams: false,\n    idsRegExp: /^\\d+$|^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/,\n  };\n  developerMode = false;\n  ga = {};\n  appInsights = {};\n  gtm = {};\n}\n"
  ],
  "names": [
    "tslib_1.__spread",
    "tslib_1.__values"
  ],
  "mappings": "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"
}
